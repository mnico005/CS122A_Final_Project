
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000282  00800100  00000f7e  00001012  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000188  00800382  00800382  00001294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ef6  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ade  00000000  00000000  00003342  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001094  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00004eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c4f  00000000  00000000  000051d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fc0  00000000  00000000  00005e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006de7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ac c1       	rjmp	.+856    	; 0x38e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	13 e0       	ldi	r17, 0x03	; 3
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e7       	ldi	r30, 0x7E	; 126
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 38       	cpi	r26, 0x82	; 130
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	25 e0       	ldi	r18, 0x05	; 5
  b4:	a2 e8       	ldi	r26, 0x82	; 130
  b6:	b3 e0       	ldi	r27, 0x03	; 3
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8c d5       	rcall	.+2840   	; 0xbdc <main>
  c4:	5a c7       	rjmp	.+3764   	; 0xf7a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:
char SPI_Read()
{
	SPDR = 0xFF;
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
	return(SPDR);													/* Return the SPDR value */
}
  c8:	80 ec       	ldi	r24, 0xC0	; 192
  ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	87 68       	ori	r24, 0x87	; 135
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <analog_read>:
  da:	ec e7       	ldi	r30, 0x7C	; 124
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	90 81       	ld	r25, Z
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	87 70       	andi	r24, 0x07	; 7
  e4:	89 2b       	or	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	80 83       	st	Z, r24
  f2:	80 81       	ld	r24, Z
  f4:	84 ff       	sbrs	r24, 4
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <analog_read+0x18>
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 61       	ori	r24, 0x10	; 16
 100:	80 83       	st	Z, r24
 102:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 106:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 10a:	08 95       	ret

0000010c <LocTick2>:
 10c:	02 97       	sbiw	r24, 0x02	; 2
 10e:	b0 f0       	brcs	.+44     	; 0x13c <LocTick2+0x30>
 110:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <segLoc2>
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <yLoc2>
 11a:	8b e4       	ldi	r24, 0x4B	; 75
 11c:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <xLoc2>
 120:	10 92 fd 04 	sts	0x04FD, r1	; 0x8004fd <y2+0x1>
 124:	10 92 fc 04 	sts	0x04FC, r1	; 0x8004fc <y2>
 128:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <x2+0x1>
 12c:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <x2>
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <lastDir2>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	cd df       	rcall	.-102    	; 0xda <analog_read>
 140:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <x2+0x1>
 144:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <x2>
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	c7 df       	rcall	.-114    	; 0xda <analog_read>
 14c:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <y2+0x1>
 150:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <y2>
 154:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <x2>
 158:	30 91 ff 04 	lds	r19, 0x04FF	; 0x8004ff <x2+0x1>
 15c:	25 38       	cpi	r18, 0x85	; 133
 15e:	43 e0       	ldi	r20, 0x03	; 3
 160:	34 07       	cpc	r19, r20
 162:	a8 f0       	brcs	.+42     	; 0x18e <LocTick2+0x82>
 164:	20 91 f5 04 	lds	r18, 0x04F5	; 0x8004f5 <segLoc2>
 168:	21 11       	cpse	r18, r1
 16a:	0b c0       	rjmp	.+22     	; 0x182 <LocTick2+0x76>
 16c:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <yLoc2>
 170:	25 30       	cpi	r18, 0x05	; 5
 172:	51 f0       	breq	.+20     	; 0x188 <LocTick2+0x7c>
 174:	37 e0       	ldi	r19, 0x07	; 7
 176:	30 93 f5 04 	sts	0x04F5, r19	; 0x8004f5 <segLoc2>
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	20 93 00 05 	sts	0x0500, r18	; 0x800500 <yLoc2>
 180:	03 c0       	rjmp	.+6      	; 0x188 <LocTick2+0x7c>
 182:	21 50       	subi	r18, 0x01	; 1
 184:	20 93 f5 04 	sts	0x04F5, r18	; 0x8004f5 <segLoc2>
 188:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <lastDir2>
 18c:	1f c0       	rjmp	.+62     	; 0x1cc <LocTick2+0xc0>
 18e:	28 3c       	cpi	r18, 0xC8	; 200
 190:	31 05       	cpc	r19, r1
 192:	e0 f4       	brcc	.+56     	; 0x1cc <LocTick2+0xc0>
 194:	20 91 f5 04 	lds	r18, 0x04F5	; 0x8004f5 <segLoc2>
 198:	28 30       	cpi	r18, 0x08	; 8
 19a:	41 f4       	brne	.+16     	; 0x1ac <LocTick2+0xa0>
 19c:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <segLoc2>
 1a0:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <yLoc2>
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	20 93 00 05 	sts	0x0500, r18	; 0x800500 <yLoc2>
 1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <LocTick2+0xba>
 1ac:	21 11       	cpse	r18, r1
 1ae:	08 c0       	rjmp	.+16     	; 0x1c0 <LocTick2+0xb4>
 1b0:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <yLoc2>
 1b4:	22 23       	and	r18, r18
 1b6:	39 f0       	breq	.+14     	; 0x1c6 <LocTick2+0xba>
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	20 93 f5 04 	sts	0x04F5, r18	; 0x8004f5 <segLoc2>
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <LocTick2+0xba>
 1c0:	2f 5f       	subi	r18, 0xFF	; 255
 1c2:	20 93 f5 04 	sts	0x04F5, r18	; 0x8004f5 <segLoc2>
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	20 93 f4 04 	sts	0x04F4, r18	; 0x8004f4 <lastDir2>
 1cc:	85 38       	cpi	r24, 0x85	; 133
 1ce:	23 e0       	ldi	r18, 0x03	; 3
 1d0:	92 07       	cpc	r25, r18
 1d2:	68 f0       	brcs	.+26     	; 0x1ee <LocTick2+0xe2>
 1d4:	20 91 09 05 	lds	r18, 0x0509	; 0x800509 <xLoc2>
 1d8:	2c 34       	cpi	r18, 0x4C	; 76
 1da:	48 f4       	brcc	.+18     	; 0x1ee <LocTick2+0xe2>
 1dc:	2f 5f       	subi	r18, 0xFF	; 255
 1de:	20 93 09 05 	sts	0x0509, r18	; 0x800509 <xLoc2>
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <lastDir2>
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	88 3c       	cpi	r24, 0xC8	; 200
 1f0:	91 05       	cpc	r25, r1
 1f2:	68 f4       	brcc	.+26     	; 0x20e <LocTick2+0x102>
 1f4:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <xLoc2>
 1f8:	88 23       	and	r24, r24
 1fa:	61 f0       	breq	.+24     	; 0x214 <LocTick2+0x108>
 1fc:	81 50       	subi	r24, 0x01	; 1
 1fe:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <xLoc2>
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <lastDir2>
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	08 95       	ret
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	08 95       	ret
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	08 95       	ret

0000021a <LocTick>:
 21a:	02 97       	sbiw	r24, 0x02	; 2
 21c:	a0 f0       	brcs	.+40     	; 0x246 <LocTick+0x2c>
 21e:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <segLoc>
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <yLoc>
 228:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <xLoc>
 22c:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <y+0x1>
 230:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <y>
 234:	10 92 f8 04 	sts	0x04F8, r1	; 0x8004f8 <x+0x1>
 238:	10 92 f7 04 	sts	0x04F7, r1	; 0x8004f7 <x>
 23c:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <lastDir>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	08 95       	ret
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	48 df       	rcall	.-368    	; 0xda <analog_read>
 24a:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <x+0x1>
 24e:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <x>
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	42 df       	rcall	.-380    	; 0xda <analog_read>
 256:	90 93 04 05 	sts	0x0504, r25	; 0x800504 <y+0x1>
 25a:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <y>
 25e:	20 91 f7 04 	lds	r18, 0x04F7	; 0x8004f7 <x>
 262:	30 91 f8 04 	lds	r19, 0x04F8	; 0x8004f8 <x+0x1>
 266:	25 38       	cpi	r18, 0x85	; 133
 268:	43 e0       	ldi	r20, 0x03	; 3
 26a:	34 07       	cpc	r19, r20
 26c:	a8 f0       	brcs	.+42     	; 0x298 <LocTick+0x7e>
 26e:	20 91 07 05 	lds	r18, 0x0507	; 0x800507 <segLoc>
 272:	21 11       	cpse	r18, r1
 274:	0b c0       	rjmp	.+22     	; 0x28c <LocTick+0x72>
 276:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <yLoc>
 27a:	25 30       	cpi	r18, 0x05	; 5
 27c:	51 f0       	breq	.+20     	; 0x292 <LocTick+0x78>
 27e:	37 e0       	ldi	r19, 0x07	; 7
 280:	30 93 07 05 	sts	0x0507, r19	; 0x800507 <segLoc>
 284:	2f 5f       	subi	r18, 0xFF	; 255
 286:	20 93 f6 04 	sts	0x04F6, r18	; 0x8004f6 <yLoc>
 28a:	03 c0       	rjmp	.+6      	; 0x292 <LocTick+0x78>
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	20 93 07 05 	sts	0x0507, r18	; 0x800507 <segLoc>
 292:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <lastDir>
 296:	1f c0       	rjmp	.+62     	; 0x2d6 <LocTick+0xbc>
 298:	28 3c       	cpi	r18, 0xC8	; 200
 29a:	31 05       	cpc	r19, r1
 29c:	e0 f4       	brcc	.+56     	; 0x2d6 <LocTick+0xbc>
 29e:	20 91 07 05 	lds	r18, 0x0507	; 0x800507 <segLoc>
 2a2:	28 30       	cpi	r18, 0x08	; 8
 2a4:	41 f4       	brne	.+16     	; 0x2b6 <LocTick+0x9c>
 2a6:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <segLoc>
 2aa:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <yLoc>
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	20 93 f6 04 	sts	0x04F6, r18	; 0x8004f6 <yLoc>
 2b4:	0d c0       	rjmp	.+26     	; 0x2d0 <LocTick+0xb6>
 2b6:	21 11       	cpse	r18, r1
 2b8:	08 c0       	rjmp	.+16     	; 0x2ca <LocTick+0xb0>
 2ba:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <yLoc>
 2be:	22 23       	and	r18, r18
 2c0:	39 f0       	breq	.+14     	; 0x2d0 <LocTick+0xb6>
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	20 93 07 05 	sts	0x0507, r18	; 0x800507 <segLoc>
 2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <LocTick+0xb6>
 2ca:	2f 5f       	subi	r18, 0xFF	; 255
 2cc:	20 93 07 05 	sts	0x0507, r18	; 0x800507 <segLoc>
 2d0:	21 e0       	ldi	r18, 0x01	; 1
 2d2:	20 93 f9 04 	sts	0x04F9, r18	; 0x8004f9 <lastDir>
 2d6:	85 38       	cpi	r24, 0x85	; 133
 2d8:	23 e0       	ldi	r18, 0x03	; 3
 2da:	92 07       	cpc	r25, r18
 2dc:	68 f0       	brcs	.+26     	; 0x2f8 <LocTick+0xde>
 2de:	20 91 01 05 	lds	r18, 0x0501	; 0x800501 <xLoc>
 2e2:	2c 34       	cpi	r18, 0x4C	; 76
 2e4:	48 f4       	brcc	.+18     	; 0x2f8 <LocTick+0xde>
 2e6:	2f 5f       	subi	r18, 0xFF	; 255
 2e8:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <xLoc>
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <lastDir>
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	08 95       	ret
 2f8:	88 3c       	cpi	r24, 0xC8	; 200
 2fa:	91 05       	cpc	r25, r1
 2fc:	68 f4       	brcc	.+26     	; 0x318 <LocTick+0xfe>
 2fe:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <xLoc>
 302:	88 23       	and	r24, r24
 304:	61 f0       	breq	.+24     	; 0x31e <LocTick+0x104>
 306:	81 50       	subi	r24, 0x01	; 1
 308:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <xLoc>
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <lastDir>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	08 95       	ret
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	08 95       	ret
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	08 95       	ret

00000324 <TimerSet>:
 324:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <_avr_timer_M>
 328:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <_avr_timer_M+0x1>
 32c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_M+0x2>
 330:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_M+0x3>
 334:	60 93 ef 04 	sts	0x04EF, r22	; 0x8004ef <_avr_timer_cntcurr>
 338:	70 93 f0 04 	sts	0x04F0, r23	; 0x8004f0 <_avr_timer_cntcurr+0x1>
 33c:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <_avr_timer_cntcurr+0x2>
 340:	90 93 f2 04 	sts	0x04F2, r25	; 0x8004f2 <_avr_timer_cntcurr+0x3>
 344:	08 95       	ret

00000346 <TimerOn>:
 346:	8b e0       	ldi	r24, 0x0B	; 11
 348:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 34c:	8d e7       	ldi	r24, 0x7D	; 125
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 354:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 35e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 362:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 366:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_avr_timer_M>
 36a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_avr_timer_M+0x1>
 36e:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <_avr_timer_M+0x2>
 372:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <_avr_timer_M+0x3>
 376:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <_avr_timer_cntcurr>
 37a:	90 93 f0 04 	sts	0x04F0, r25	; 0x8004f0 <_avr_timer_cntcurr+0x1>
 37e:	a0 93 f1 04 	sts	0x04F1, r26	; 0x8004f1 <_avr_timer_cntcurr+0x2>
 382:	b0 93 f2 04 	sts	0x04F2, r27	; 0x8004f2 <_avr_timer_cntcurr+0x3>
 386:	8f b7       	in	r24, 0x3f	; 63
 388:	80 68       	ori	r24, 0x80	; 128
 38a:	8f bf       	out	0x3f, r24	; 63
 38c:	08 95       	ret

0000038e <__vector_13>:
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	8f 93       	push	r24
 39a:	9f 93       	push	r25
 39c:	af 93       	push	r26
 39e:	bf 93       	push	r27
 3a0:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <_avr_timer_cntcurr>
 3a4:	90 91 f0 04 	lds	r25, 0x04F0	; 0x8004f0 <_avr_timer_cntcurr+0x1>
 3a8:	a0 91 f1 04 	lds	r26, 0x04F1	; 0x8004f1 <_avr_timer_cntcurr+0x2>
 3ac:	b0 91 f2 04 	lds	r27, 0x04F2	; 0x8004f2 <_avr_timer_cntcurr+0x3>
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	a1 09       	sbc	r26, r1
 3b4:	b1 09       	sbc	r27, r1
 3b6:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <_avr_timer_cntcurr>
 3ba:	90 93 f0 04 	sts	0x04F0, r25	; 0x8004f0 <_avr_timer_cntcurr+0x1>
 3be:	a0 93 f1 04 	sts	0x04F1, r26	; 0x8004f1 <_avr_timer_cntcurr+0x2>
 3c2:	b0 93 f2 04 	sts	0x04F2, r27	; 0x8004f2 <_avr_timer_cntcurr+0x3>
 3c6:	89 2b       	or	r24, r25
 3c8:	8a 2b       	or	r24, r26
 3ca:	8b 2b       	or	r24, r27
 3cc:	99 f4       	brne	.+38     	; 0x3f4 <__vector_13+0x66>
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <TimerFlag>
 3d4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_avr_timer_M>
 3d8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_avr_timer_M+0x1>
 3dc:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <_avr_timer_M+0x2>
 3e0:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <_avr_timer_M+0x3>
 3e4:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <_avr_timer_cntcurr>
 3e8:	90 93 f0 04 	sts	0x04F0, r25	; 0x8004f0 <_avr_timer_cntcurr+0x1>
 3ec:	a0 93 f1 04 	sts	0x04F1, r26	; 0x8004f1 <_avr_timer_cntcurr+0x2>
 3f0:	b0 93 f2 04 	sts	0x04F2, r27	; 0x8004f2 <_avr_timer_cntcurr+0x3>
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <SPI_SS_Enable>:
 406:	2c 98       	cbi	0x05, 4	; 5
 408:	08 95       	ret

0000040a <SPI_SS_Disable>:
 40a:	2c 9a       	sbi	0x05, 4	; 5
 40c:	08 95       	ret

0000040e <SPI_Init>:
 40e:	8b eb       	ldi	r24, 0xBB	; 187
 410:	84 b9       	out	0x04, r24	; 4
 412:	28 9a       	sbi	0x05, 0	; 5
 414:	2b 9a       	sbi	0x05, 3	; 5
 416:	26 98       	cbi	0x04, 6	; 4
 418:	2c 9a       	sbi	0x05, 4	; 5
 41a:	81 e5       	ldi	r24, 0x51	; 81
 41c:	8c bd       	out	0x2c, r24	; 44
 41e:	08 95       	ret

00000420 <SPI_Write>:

void SPI_Write(char write_data)										
{
	SPDR = write_data;													
 420:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));										/* wait here while SPIF flag set */
 422:	0d b4       	in	r0, 0x2d	; 45
 424:	07 fe       	sbrs	r0, 7
 426:	fd cf       	rjmp	.-6      	; 0x422 <SPI_Write+0x2>
}
 428:	08 95       	ret

0000042a <N5110_Cmnd>:
#define NOKIA_5110_H_FILE



void N5110_Cmnd(char DATA)
{
 42a:	cf 93       	push	r28
 42c:	c8 2f       	mov	r28, r24
	PORTB &= ~(1<<DC);				/* make DC pin to logic zero for command operation */
 42e:	29 98       	cbi	0x05, 1	; 5
	SPI_SS_Enable();				/* enable SS pin to slave selection */	
 430:	ea df       	rcall	.-44     	; 0x406 <SPI_SS_Enable>
	SPI_Write(DATA);				/* send data on data register */
 432:	8c 2f       	mov	r24, r28
 434:	f5 df       	rcall	.-22     	; 0x420 <SPI_Write>
	PORTB |= (1<<DC);				/* make DC pin to logic high for data operation */
 436:	29 9a       	sbi	0x05, 1	; 5
	SPI_SS_Disable();
 438:	e8 df       	rcall	.-48     	; 0x40a <SPI_SS_Disable>
 43a:	cf 91       	pop	r28
}
 43c:	08 95       	ret

0000043e <N5110_Data>:
 43e:	ef 92       	push	r14

void N5110_Data(char *DATA)
{
 440:	ff 92       	push	r15
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	8c 01       	movw	r16, r24
	PORTB |= (1<<DC);									/* make DC pin to logic high for data operation */
 44c:	29 9a       	sbi	0x05, 1	; 5
	SPI_SS_Enable();									/* enable SS pin to slave selection */
 44e:	db df       	rcall	.-74     	; 0x406 <SPI_SS_Enable>
	int lenan = strlen(DATA);							/* measure the length of data */
 450:	f8 01       	movw	r30, r16
 452:	01 90       	ld	r0, Z+
 454:	00 20       	and	r0, r0
 456:	e9 f7       	brne	.-6      	; 0x452 <N5110_Data+0x14>
 458:	31 97       	sbiw	r30, 0x01	; 1
 45a:	e0 1b       	sub	r30, r16
 45c:	f1 0b       	sbc	r31, r17
	for (int g=0; g<lenan; g++)
 45e:	1e 16       	cp	r1, r30
 460:	1f 06       	cpc	r1, r31
 462:	2c f5       	brge	.+74     	; 0x4ae <N5110_Data+0x70>
 464:	e8 01       	movw	r28, r16
 466:	0e 0f       	add	r16, r30
 468:	1f 1f       	adc	r17, r31
 46a:	1e c0       	rjmp	.+60     	; 0x4a8 <N5110_Data+0x6a>
	{
		for (int index=0; index<5; index++)
		{
			SPI_Write(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */			
 46c:	28 81       	ld	r18, Y
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	20 52       	subi	r18, 0x20	; 32
 472:	31 09       	sbc	r19, r1
 474:	f9 01       	movw	r30, r18
 476:	ee 0f       	add	r30, r30
 478:	ff 1f       	adc	r31, r31
 47a:	ee 0f       	add	r30, r30
 47c:	ff 1f       	adc	r31, r31
 47e:	e2 0f       	add	r30, r18
 480:	f3 1f       	adc	r31, r19
 482:	ee 55       	subi	r30, 0x5E	; 94
 484:	fe 4f       	sbci	r31, 0xFE	; 254
 486:	ee 0d       	add	r30, r14
 488:	ff 1d       	adc	r31, r15
 48a:	80 81       	ld	r24, Z
 48c:	c9 df       	rcall	.-110    	; 0x420 <SPI_Write>
	PORTB |= (1<<DC);									/* make DC pin to logic high for data operation */
	SPI_SS_Enable();									/* enable SS pin to slave selection */
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
	{
		for (int index=0; index<5; index++)
 48e:	8f ef       	ldi	r24, 0xFF	; 255
 490:	e8 1a       	sub	r14, r24
 492:	f8 0a       	sbc	r15, r24
 494:	85 e0       	ldi	r24, 0x05	; 5
 496:	e8 16       	cp	r14, r24
 498:	f1 04       	cpc	r15, r1
		{
			SPI_Write(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */			
		}
		SPI_Write(0x00);
 49a:	41 f7       	brne	.-48     	; 0x46c <N5110_Data+0x2e>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	c0 df       	rcall	.-128    	; 0x420 <SPI_Write>
 4a0:	21 96       	adiw	r28, 0x01	; 1
void N5110_Data(char *DATA)
{
	PORTB |= (1<<DC);									/* make DC pin to logic high for data operation */
	SPI_SS_Enable();									/* enable SS pin to slave selection */
	int lenan = strlen(DATA);							/* measure the length of data */
	for (int g=0; g<lenan; g++)
 4a2:	0c 17       	cp	r16, r28
 4a4:	1d 07       	cpc	r17, r29
 4a6:	19 f0       	breq	.+6      	; 0x4ae <N5110_Data+0x70>
	PORTB |= (1<<DC);				/* make DC pin to logic high for data operation */
	SPI_SS_Disable();
}

void N5110_Data(char *DATA)
{
 4a8:	e1 2c       	mov	r14, r1
 4aa:	f1 2c       	mov	r15, r1
		{
			SPI_Write(ASCII[DATA[g] - 0x20][index]);	/* send the data on data register */			
		}
		SPI_Write(0x00);
	}							
	SPI_SS_Disable();									
 4ac:	df cf       	rjmp	.-66     	; 0x46c <N5110_Data+0x2e>
 4ae:	ad df       	rcall	.-166    	; 0x40a <SPI_SS_Disable>
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	ff 90       	pop	r15
 4ba:	ef 90       	pop	r14
 4bc:	08 95       	ret

000004be <N5110_Reset>:

void N5110_Reset()					/* reset the Display at the beginning of initialization */
{
	PORTB &= ~(1<<RST);
 4be:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c0:	2f ef       	ldi	r18, 0xFF	; 255
 4c2:	80 e7       	ldi	r24, 0x70	; 112
 4c4:	92 e0       	ldi	r25, 0x02	; 2
 4c6:	21 50       	subi	r18, 0x01	; 1
 4c8:	80 40       	sbci	r24, 0x00	; 0
 4ca:	90 40       	sbci	r25, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <N5110_Reset+0x8>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <N5110_Reset+0x12>
 4d0:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<RST);
 4d2:	28 9a       	sbi	0x05, 0	; 5
 4d4:	08 95       	ret

000004d6 <N5110_init>:
}

void N5110_init()
{
	N5110_Reset();					/* reset the display */
 4d6:	f3 df       	rcall	.-26     	; 0x4be <N5110_Reset>
	N5110_Cmnd(0x21);				/* command set in addition mode */
 4d8:	81 e2       	ldi	r24, 0x21	; 33
 4da:	a7 df       	rcall	.-178    	; 0x42a <N5110_Cmnd>
	N5110_Cmnd(0xC0);				/* set the voltage by sending C0 means VOP = 5V */
 4dc:	80 ec       	ldi	r24, 0xC0	; 192
 4de:	a5 df       	rcall	.-182    	; 0x42a <N5110_Cmnd>
	N5110_Cmnd(0x07);				/* set the temp. coefficient to 3 */
 4e0:	87 e0       	ldi	r24, 0x07	; 7
 4e2:	a3 df       	rcall	.-186    	; 0x42a <N5110_Cmnd>
	N5110_Cmnd(0x13);				/* set value of Voltage Bias System */
 4e4:	83 e1       	ldi	r24, 0x13	; 19
 4e6:	a1 df       	rcall	.-190    	; 0x42a <N5110_Cmnd>
	N5110_Cmnd(0x20);				/* command set in basic mode */
 4e8:	80 e2       	ldi	r24, 0x20	; 32
 4ea:	9f df       	rcall	.-194    	; 0x42a <N5110_Cmnd>
 4ec:	8c e0       	ldi	r24, 0x0C	; 12
	N5110_Cmnd(0x0C);				/* display result in normal mode */
 4ee:	9d cf       	rjmp	.-198    	; 0x42a <N5110_Cmnd>
 4f0:	08 95       	ret

000004f2 <lcd_setXY>:
 4f2:	cf 93       	push	r28
 4f4:	c6 2f       	mov	r28, r22
}

void lcd_setXY(char x, char y)		/* set the column and row */
{
	N5110_Cmnd(x);
 4f6:	99 df       	rcall	.-206    	; 0x42a <N5110_Cmnd>
	N5110_Cmnd(y);
 4f8:	8c 2f       	mov	r24, r28
 4fa:	97 df       	rcall	.-210    	; 0x42a <N5110_Cmnd>
}
 4fc:	cf 91       	pop	r28
 4fe:	08 95       	ret

00000500 <N5110_clear>:

void N5110_clear()					/* clear the Display */
{
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
	SPI_SS_Enable();
 504:	80 df       	rcall	.-256    	; 0x406 <SPI_SS_Enable>
	PORTB |= (1<<DC);
 506:	29 9a       	sbi	0x05, 1	; 5
 508:	c8 ef       	ldi	r28, 0xF8	; 248
 50a:	d1 e0       	ldi	r29, 0x01	; 1
	for (int k=0; k<=503; k++)
	{
		SPI_Write(0x00);		
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	88 df       	rcall	.-240    	; 0x420 <SPI_Write>
 510:	21 97       	sbiw	r28, 0x01	; 1
	}
	PORTB &= ~(1<<DC);
 512:	e1 f7       	brne	.-8      	; 0x50c <N5110_clear+0xc>
	SPI_SS_Disable();	
 514:	29 98       	cbi	0x05, 1	; 5
 516:	79 df       	rcall	.-270    	; 0x40a <SPI_SS_Disable>
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <CollTick>:
	return state;
}
enum CollStates {collStart, collCheck, collFound};
	
int CollTick(int state){
	switch(state){//Transitions
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	91 05       	cpc	r25, r1
 522:	39 f0       	breq	.+14     	; 0x532 <CollTick+0x14>
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	91 05       	cpc	r25, r1
 528:	e1 f1       	breq	.+120    	; 0x5a2 <CollTick+0x84>
 52a:	89 2b       	or	r24, r25
 52c:	09 f0       	breq	.+2      	; 0x530 <CollTick+0x12>
 52e:	44 c0       	rjmp	.+136    	; 0x5b8 <CollTick+0x9a>
 530:	40 c0       	rjmp	.+128    	; 0x5b2 <CollTick+0x94>
		case collStart:
			state = collCheck;
			break;
		case collCheck:
			if (yLoc2 == ProjY && ProjSeg >= segLoc2 && ProjX < xLoc2 +8 && ProjX > xLoc2)
 532:	20 91 00 05 	lds	r18, 0x0500	; 0x800500 <yLoc2>
 536:	40 91 fb 04 	lds	r20, 0x04FB	; 0x8004fb <ProjY>
 53a:	24 13       	cpse	r18, r20
 53c:	16 c0       	rjmp	.+44     	; 0x56a <CollTick+0x4c>
 53e:	30 91 02 05 	lds	r19, 0x0502	; 0x800502 <ProjSeg>
 542:	20 91 f5 04 	lds	r18, 0x04F5	; 0x8004f5 <segLoc2>
 546:	32 17       	cp	r19, r18
 548:	c8 f1       	brcs	.+114    	; 0x5bc <CollTick+0x9e>
 54a:	50 91 fa 04 	lds	r21, 0x04FA	; 0x8004fa <ProjX>
 54e:	40 91 09 05 	lds	r20, 0x0509	; 0x800509 <xLoc2>
 552:	65 2f       	mov	r22, r21
 554:	70 e0       	ldi	r23, 0x00	; 0
 556:	24 2f       	mov	r18, r20
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	28 5f       	subi	r18, 0xF8	; 248
 55c:	3f 4f       	sbci	r19, 0xFF	; 255
 55e:	62 17       	cp	r22, r18
 560:	73 07       	cpc	r23, r19
 562:	64 f5       	brge	.+88     	; 0x5bc <CollTick+0x9e>
 564:	45 17       	cp	r20, r21
 566:	e8 f0       	brcs	.+58     	; 0x5a2 <CollTick+0x84>
 568:	08 95       	ret
			{
				state = collFound;
			}
			else if (yLoc2-1 == ProjY && ProjSeg < segLoc2 && ProjX < xLoc2 +8 && ProjX > xLoc2)
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	21 50       	subi	r18, 0x01	; 1
 56e:	31 09       	sbc	r19, r1
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	24 17       	cp	r18, r20
 574:	35 07       	cpc	r19, r21
 576:	11 f5       	brne	.+68     	; 0x5bc <CollTick+0x9e>
 578:	30 91 02 05 	lds	r19, 0x0502	; 0x800502 <ProjSeg>
 57c:	20 91 f5 04 	lds	r18, 0x04F5	; 0x8004f5 <segLoc2>
 580:	32 17       	cp	r19, r18
 582:	e0 f4       	brcc	.+56     	; 0x5bc <CollTick+0x9e>
 584:	50 91 fa 04 	lds	r21, 0x04FA	; 0x8004fa <ProjX>
 588:	40 91 09 05 	lds	r20, 0x0509	; 0x800509 <xLoc2>
 58c:	65 2f       	mov	r22, r21
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	24 2f       	mov	r18, r20
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	28 5f       	subi	r18, 0xF8	; 248
 596:	3f 4f       	sbci	r19, 0xFF	; 255
 598:	62 17       	cp	r22, r18
 59a:	73 07       	cpc	r23, r19
 59c:	7c f4       	brge	.+30     	; 0x5bc <CollTick+0x9e>
 59e:	45 17       	cp	r20, r21
 5a0:	68 f4       	brcc	.+26     	; 0x5bc <CollTick+0x9e>
			break;
		case collCheck:
		
			break;
		case collFound:
			N5110_clear();
 5a2:	ae df       	rcall	.-164    	; 0x500 <N5110_clear>
			lcd_setXY(0x80, 0x40 +2);
 5a4:	62 e4       	ldi	r22, 0x42	; 66
 5a6:	80 e8       	ldi	r24, 0x80	; 128
 5a8:	a4 df       	rcall	.-184    	; 0x4f2 <lcd_setXY>
			N5110_Data("PLAYER 1 WINS!");
 5aa:	8c e2       	ldi	r24, 0x2C	; 44
 5ac:	91 e0       	ldi	r25, 0x01	; 1
 5ae:	47 df       	rcall	.-370    	; 0x43e <N5110_Data>
 5b0:	ff cf       	rjmp	.-2      	; 0x5b0 <CollTick+0x92>
enum CollStates {collStart, collCheck, collFound};
	
int CollTick(int state){
	switch(state){//Transitions
		case collStart:
			state = collCheck;
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	08 95       	ret
			break;
		case collFound:
			state = collFound;
			break;
		default:
			 state = collStart;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
			
		default:
			break;
	}
	return state;
}
 5bc:	08 95       	ret

000005be <CollTick2>:
/////////////////////////////////////////
enum CollStates2 {collStart2, collCheck2, collFound2};

int CollTick2(int state){
	switch(state){//Transitions
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	91 05       	cpc	r25, r1
 5c2:	39 f0       	breq	.+14     	; 0x5d2 <CollTick2+0x14>
 5c4:	82 30       	cpi	r24, 0x02	; 2
 5c6:	91 05       	cpc	r25, r1
 5c8:	e1 f1       	breq	.+120    	; 0x642 <CollTick2+0x84>
 5ca:	89 2b       	or	r24, r25
 5cc:	09 f0       	breq	.+2      	; 0x5d0 <CollTick2+0x12>
 5ce:	44 c0       	rjmp	.+136    	; 0x658 <CollTick2+0x9a>
 5d0:	40 c0       	rjmp	.+128    	; 0x652 <CollTick2+0x94>
		case collStart2:
		state = collCheck2;
		break;
		case collCheck2:
		if (yLoc == ProjY2 && ProjSeg2 >= segLoc && ProjX2 < xLoc +8 && ProjX2 > xLoc)
 5d2:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <yLoc>
 5d6:	40 91 06 05 	lds	r20, 0x0506	; 0x800506 <ProjY2>
 5da:	24 13       	cpse	r18, r20
 5dc:	16 c0       	rjmp	.+44     	; 0x60a <CollTick2+0x4c>
 5de:	30 91 08 05 	lds	r19, 0x0508	; 0x800508 <ProjSeg2>
 5e2:	20 91 07 05 	lds	r18, 0x0507	; 0x800507 <segLoc>
 5e6:	32 17       	cp	r19, r18
 5e8:	c8 f1       	brcs	.+114    	; 0x65c <CollTick2+0x9e>
 5ea:	50 91 05 05 	lds	r21, 0x0505	; 0x800505 <ProjX2>
 5ee:	40 91 01 05 	lds	r20, 0x0501	; 0x800501 <xLoc>
 5f2:	65 2f       	mov	r22, r21
 5f4:	70 e0       	ldi	r23, 0x00	; 0
 5f6:	24 2f       	mov	r18, r20
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	28 5f       	subi	r18, 0xF8	; 248
 5fc:	3f 4f       	sbci	r19, 0xFF	; 255
 5fe:	62 17       	cp	r22, r18
 600:	73 07       	cpc	r23, r19
 602:	64 f5       	brge	.+88     	; 0x65c <CollTick2+0x9e>
 604:	45 17       	cp	r20, r21
 606:	e8 f0       	brcs	.+58     	; 0x642 <CollTick2+0x84>
 608:	08 95       	ret
		{
			state = collFound2;
		}
		else if (yLoc-1 == ProjY2 && ProjSeg2 < segLoc && ProjX2 < xLoc +8 && ProjX2 > xLoc)
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	21 50       	subi	r18, 0x01	; 1
 60e:	31 09       	sbc	r19, r1
 610:	50 e0       	ldi	r21, 0x00	; 0
 612:	24 17       	cp	r18, r20
 614:	35 07       	cpc	r19, r21
 616:	11 f5       	brne	.+68     	; 0x65c <CollTick2+0x9e>
 618:	30 91 08 05 	lds	r19, 0x0508	; 0x800508 <ProjSeg2>
 61c:	20 91 07 05 	lds	r18, 0x0507	; 0x800507 <segLoc>
 620:	32 17       	cp	r19, r18
 622:	e0 f4       	brcc	.+56     	; 0x65c <CollTick2+0x9e>
 624:	50 91 05 05 	lds	r21, 0x0505	; 0x800505 <ProjX2>
 628:	40 91 01 05 	lds	r20, 0x0501	; 0x800501 <xLoc>
 62c:	65 2f       	mov	r22, r21
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	24 2f       	mov	r18, r20
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	28 5f       	subi	r18, 0xF8	; 248
 636:	3f 4f       	sbci	r19, 0xFF	; 255
 638:	62 17       	cp	r22, r18
 63a:	73 07       	cpc	r23, r19
 63c:	7c f4       	brge	.+30     	; 0x65c <CollTick2+0x9e>
 63e:	45 17       	cp	r20, r21
 640:	68 f4       	brcc	.+26     	; 0x65c <CollTick2+0x9e>
		break;
		case collCheck2:
		
		break;
		case collFound2:
		N5110_clear();
 642:	5e df       	rcall	.-324    	; 0x500 <N5110_clear>
		lcd_setXY(0x80, 0x40 +2);
 644:	62 e4       	ldi	r22, 0x42	; 66
 646:	80 e8       	ldi	r24, 0x80	; 128
 648:	54 df       	rcall	.-344    	; 0x4f2 <lcd_setXY>
		N5110_Data("PLAYER 2 WINS!");
 64a:	8b e3       	ldi	r24, 0x3B	; 59
 64c:	91 e0       	ldi	r25, 0x01	; 1
 64e:	f7 de       	rcall	.-530    	; 0x43e <N5110_Data>
 650:	ff cf       	rjmp	.-2      	; 0x650 <CollTick2+0x92>
enum CollStates2 {collStart2, collCheck2, collFound2};

int CollTick2(int state){
	switch(state){//Transitions
		case collStart2:
		state = collCheck2;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	08 95       	ret
		break;
		case collFound2:
		state = collFound2;
		break;
		default:
		state = collStart2;
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
		
		default:
		break;
	}
	return state;
}
 65c:	08 95       	ret

0000065e <N5110_image>:

void N5110_image(const unsigned char *image_data, const unsigned char size)		/* clear the Display */
{
 65e:	ff 92       	push	r15
 660:	0f 93       	push	r16
 662:	1f 93       	push	r17
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	8c 01       	movw	r16, r24
 66a:	f6 2e       	mov	r15, r22
	SPI_SS_Enable();
 66c:	cc de       	rcall	.-616    	; 0x406 <SPI_SS_Enable>
	PORTB |= (1<<DC);
 66e:	29 9a       	sbi	0x05, 1	; 5
	for (int k=0; k < size; k++)
 670:	ff 20       	and	r15, r15
 672:	41 f0       	breq	.+16     	; 0x684 <N5110_image+0x26>
 674:	e8 01       	movw	r28, r16
 676:	0f 0d       	add	r16, r15
 678:	11 1d       	adc	r17, r1
	{
		SPI_Write(image_data[k]);
 67a:	89 91       	ld	r24, Y+
 67c:	d1 de       	rcall	.-606    	; 0x420 <SPI_Write>

void N5110_image(const unsigned char *image_data, const unsigned char size)		/* clear the Display */
{
	SPI_SS_Enable();
	PORTB |= (1<<DC);
	for (int k=0; k < size; k++)
 67e:	c0 17       	cp	r28, r16
 680:	d1 07       	cpc	r29, r17
	{
		SPI_Write(image_data[k]);
	}
	PORTB &= ~(1<<DC);
 682:	d9 f7       	brne	.-10     	; 0x67a <N5110_image+0x1c>
	SPI_SS_Disable();
 684:	29 98       	cbi	0x05, 1	; 5
 686:	c1 de       	rcall	.-638    	; 0x40a <SPI_SS_Disable>
}
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	ff 90       	pop	r15
 692:	08 95       	ret

00000694 <BuildTick2>:
static unsigned char* character2_bottom[] = {character2, character_bottom12, character_bottom22, character_bottom32, character_bottom42, character_bottom52, character_bottom62, character_bottom72, character_bottom82};

unsigned char j2 = 0;
unsigned char i2 = 0;
int BuildTick2(int state){
	switch(state){//Transitions
 694:	02 97       	sbiw	r24, 0x02	; 2
 696:	08 f4       	brcc	.+2      	; 0x69a <BuildTick2+0x6>
 698:	60 c0       	rjmp	.+192    	; 0x75a <BuildTick2+0xc6>
		break;
	}
	switch(state){//Actions
		case BuildStart2:
		//initialize bottom
		for (j2 = 1; j2 < 9; j2++) // 9
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <j2>
		{
			for (i2=0; i2<8;i2++)//13
 6a0:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <i2>
 6a4:	80 e0       	ldi	r24, 0x00	; 0
			{
				character2_bottom[j2][i2] = (character2[i2] >> j2);
 6a6:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <j2>
 6aa:	e2 2f       	mov	r30, r18
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	ee 0f       	add	r30, r30
 6b0:	ff 1f       	adc	r31, r31
 6b2:	e2 58       	subi	r30, 0x82	; 130
 6b4:	fe 4f       	sbci	r31, 0xFE	; 254
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	01 90       	ld	r0, Z+
 6ba:	f0 81       	ld	r31, Z
 6bc:	e0 2d       	mov	r30, r0
 6be:	e8 0f       	add	r30, r24
 6c0:	f9 1f       	adc	r31, r25
 6c2:	dc 01       	movw	r26, r24
 6c4:	a0 5f       	subi	r26, 0xF0	; 240
 6c6:	be 4f       	sbci	r27, 0xFE	; 254
 6c8:	8c 91       	ld	r24, X
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <BuildTick2+0x3e>
 6ce:	95 95       	asr	r25
 6d0:	87 95       	ror	r24
 6d2:	2a 95       	dec	r18
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <BuildTick2+0x3a>
 6d6:	80 83       	st	Z, r24
	switch(state){//Actions
		case BuildStart2:
		//initialize bottom
		for (j2 = 1; j2 < 9; j2++) // 9
		{
			for (i2=0; i2<8;i2++)//13
 6d8:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <i2>
 6dc:	8f 5f       	subi	r24, 0xFF	; 255
 6de:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <i2>
 6e2:	88 30       	cpi	r24, 0x08	; 8
 6e4:	00 f3       	brcs	.-64     	; 0x6a6 <BuildTick2+0x12>
		break;
	}
	switch(state){//Actions
		case BuildStart2:
		//initialize bottom
		for (j2 = 1; j2 < 9; j2++) // 9
 6e6:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <j2>
 6ea:	8f 5f       	subi	r24, 0xFF	; 255
 6ec:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <j2>
 6f0:	89 30       	cpi	r24, 0x09	; 9
 6f2:	b0 f2       	brcs	.-84     	; 0x6a0 <BuildTick2+0xc>
			{
				character2_bottom[j2][i2] = (character2[i2] >> j2);
			}
		}
		//initialize top
		for (j2 = 1; j2 < 9; j2++)
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <j2>
		{
			for (i2=0; i2<8;i2++)
			{
				character2_top[j2][i2] =  (character2[i2] << (8-j2));
 6fa:	48 e0       	ldi	r20, 0x08	; 8
 6fc:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
		//initialize top
		for (j2 = 1; j2 < 9; j2++)
		{
			for (i2=0; i2<8;i2++)
 6fe:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <i2>
 702:	80 e0       	ldi	r24, 0x00	; 0
			{
				character2_top[j2][i2] =  (character2[i2] << (8-j2));
 704:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <j2>
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	f9 01       	movw	r30, r18
 70c:	ee 0f       	add	r30, r30
 70e:	ff 1f       	adc	r31, r31
 710:	e0 57       	subi	r30, 0x70	; 112
 712:	fe 4f       	sbci	r31, 0xFE	; 254
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	01 90       	ld	r0, Z+
 718:	f0 81       	ld	r31, Z
 71a:	e0 2d       	mov	r30, r0
 71c:	e8 0f       	add	r30, r24
 71e:	f9 1f       	adc	r31, r25
 720:	dc 01       	movw	r26, r24
 722:	a0 5f       	subi	r26, 0xF0	; 240
 724:	be 4f       	sbci	r27, 0xFE	; 254
 726:	8c 91       	ld	r24, X
 728:	ba 01       	movw	r22, r20
 72a:	62 1b       	sub	r22, r18
 72c:	73 0b       	sbc	r23, r19
 72e:	01 c0       	rjmp	.+2      	; 0x732 <BuildTick2+0x9e>
 730:	88 0f       	add	r24, r24
 732:	6a 95       	dec	r22
 734:	ea f7       	brpl	.-6      	; 0x730 <BuildTick2+0x9c>
 736:	80 83       	st	Z, r24
			}
		}
		//initialize top
		for (j2 = 1; j2 < 9; j2++)
		{
			for (i2=0; i2<8;i2++)
 738:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <i2>
 73c:	8f 5f       	subi	r24, 0xFF	; 255
 73e:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <i2>
 742:	88 30       	cpi	r24, 0x08	; 8
 744:	f8 f2       	brcs	.-66     	; 0x704 <BuildTick2+0x70>
			{
				character2_bottom[j2][i2] = (character2[i2] >> j2);
			}
		}
		//initialize top
		for (j2 = 1; j2 < 9; j2++)
 746:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <j2>
 74a:	8f 5f       	subi	r24, 0xFF	; 255
 74c:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <j2>
 750:	89 30       	cpi	r24, 0x09	; 9
 752:	a8 f2       	brcs	.-86     	; 0x6fe <BuildTick2+0x6a>
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	08 95       	ret
			}
		}
		break;
		case BuildCharacter2:
		//build
		if(yLoc2 == 0){
 75a:	60 91 00 05 	lds	r22, 0x0500	; 0x800500 <yLoc2>
 75e:	61 11       	cpse	r22, r1
 760:	0a c0       	rjmp	.+20     	; 0x776 <BuildTick2+0xe2>
			lcd_setXY(0x80 + xLoc2, 0x40 + yLoc2);
 762:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <xLoc2>
 766:	60 e4       	ldi	r22, 0x40	; 64
 768:	80 58       	subi	r24, 0x80	; 128
 76a:	c3 de       	rcall	.-634    	; 0x4f2 <lcd_setXY>
			N5110_image(character2, 8);
 76c:	68 e0       	ldi	r22, 0x08	; 8
 76e:	80 e1       	ldi	r24, 0x10	; 16
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	75 df       	rcall	.-278    	; 0x65e <N5110_image>
 774:	22 c0       	rjmp	.+68     	; 0x7ba <BuildTick2+0x126>
			}else{
			lcd_setXY(0x80 + xLoc2 , 0x40 + yLoc2);
 776:	60 5c       	subi	r22, 0xC0	; 192
 778:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <xLoc2>
 77c:	80 58       	subi	r24, 0x80	; 128
 77e:	b9 de       	rcall	.-654    	; 0x4f2 <lcd_setXY>
			N5110_image(character2_bottom[segLoc2], 8);
 780:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <segLoc2>
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	ee 0f       	add	r30, r30
 788:	ff 1f       	adc	r31, r31
 78a:	e2 58       	subi	r30, 0x82	; 130
 78c:	fe 4f       	sbci	r31, 0xFE	; 254
 78e:	68 e0       	ldi	r22, 0x08	; 8
 790:	80 81       	ld	r24, Z
 792:	91 81       	ldd	r25, Z+1	; 0x01
 794:	64 df       	rcall	.-312    	; 0x65e <N5110_image>
			lcd_setXY(0x80 + xLoc2, 0x40 + yLoc2 - 1 );
 796:	60 91 00 05 	lds	r22, 0x0500	; 0x800500 <yLoc2>
 79a:	61 5c       	subi	r22, 0xC1	; 193
 79c:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <xLoc2>
 7a0:	80 58       	subi	r24, 0x80	; 128
 7a2:	a7 de       	rcall	.-690    	; 0x4f2 <lcd_setXY>
			N5110_image(character2_top[segLoc2], 8);
 7a4:	e0 91 f5 04 	lds	r30, 0x04F5	; 0x8004f5 <segLoc2>
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	ee 0f       	add	r30, r30
 7ac:	ff 1f       	adc	r31, r31
 7ae:	e0 57       	subi	r30, 0x70	; 112
 7b0:	fe 4f       	sbci	r31, 0xFE	; 254
 7b2:	68 e0       	ldi	r22, 0x08	; 8
 7b4:	80 81       	ld	r24, Z
 7b6:	91 81       	ldd	r25, Z+1	; 0x01
 7b8:	52 df       	rcall	.-348    	; 0x65e <N5110_image>
		}
		if (segLoc2 == 8)
 7ba:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <segLoc2>
 7be:	88 30       	cpi	r24, 0x08	; 8
 7c0:	51 f4       	brne	.+20     	; 0x7d6 <BuildTick2+0x142>
		{
			segLoc2 = 0;
 7c2:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <segLoc2>
			yLoc2 --;
 7c6:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <yLoc2>
 7ca:	81 50       	subi	r24, 0x01	; 1
 7cc:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <yLoc2>
unsigned char j2 = 0;
unsigned char i2 = 0;
int BuildTick2(int state){
	switch(state){//Transitions
		case BuildStart2:
		state = BuildCharacter2;
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	08 95       	ret
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		break;
	}
	return state;
}
 7da:	08 95       	ret

000007dc <ProjTick2>:

 char ProjX2;
unsigned char ProjY2;
unsigned char ProjSeg2;
int ProjTick2(int state){
	switch(state){//Transitions
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	91 05       	cpc	r25, r1
 7e0:	59 f0       	breq	.+22     	; 0x7f8 <ProjTick2+0x1c>
 7e2:	24 f4       	brge	.+8      	; 0x7ec <ProjTick2+0x10>
 7e4:	89 2b       	or	r24, r25
 7e6:	09 f4       	brne	.+2      	; 0x7ea <ProjTick2+0xe>
 7e8:	78 c0       	rjmp	.+240    	; 0x8da <ProjTick2+0xfe>
 7ea:	41 c0       	rjmp	.+130    	; 0x86e <ProjTick2+0x92>
 7ec:	82 30       	cpi	r24, 0x02	; 2
 7ee:	91 05       	cpc	r25, r1
 7f0:	a9 f1       	breq	.+106    	; 0x85c <ProjTick2+0x80>
 7f2:	03 97       	sbiw	r24, 0x03	; 3
 7f4:	51 f1       	breq	.+84     	; 0x84a <ProjTick2+0x6e>
 7f6:	3b c0       	rjmp	.+118    	; 0x86e <ProjTick2+0x92>
		case ProjStart2:
			state = ProjWait2;
			break;
		case ProjWait2:
			if (!GetBit(PINC, 1) && lastDir2 == 2){
 7f8:	31 99       	sbic	0x06, 1	; 6
 7fa:	12 c0       	rjmp	.+36     	; 0x820 <ProjTick2+0x44>
 7fc:	20 91 f4 04 	lds	r18, 0x04F4	; 0x8004f4 <lastDir2>
 800:	22 30       	cpi	r18, 0x02	; 2
 802:	71 f4       	brne	.+28     	; 0x820 <ProjTick2+0x44>
				ProjX2 = xLoc2 + 8;
 804:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <xLoc2>
 808:	88 5f       	subi	r24, 0xF8	; 248
 80a:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <ProjX2>
				ProjSeg2 = segLoc2; //+ 5;
 80e:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <segLoc2>
 812:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <ProjSeg2>
				ProjY2 = yLoc2;
 816:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <yLoc2>
 81a:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <ProjY2>
				/*if (ProjSeg > 7)
				{
					ProjSeg -= 7;
					ProjY --;
				}*/
				state = ProjRight2;
 81e:	66 c0       	rjmp	.+204    	; 0x8ec <ProjTick2+0x110>
			}
			else if (!GetBit(PINC, 1) && lastDir2 == 3){
 820:	31 99       	sbic	0x06, 1	; 6
 822:	89 c0       	rjmp	.+274    	; 0x936 <ProjTick2+0x15a>
 824:	20 91 f4 04 	lds	r18, 0x04F4	; 0x8004f4 <lastDir2>
 828:	23 30       	cpi	r18, 0x03	; 3
 82a:	09 f0       	breq	.+2      	; 0x82e <ProjTick2+0x52>
 82c:	84 c0       	rjmp	.+264    	; 0x936 <ProjTick2+0x15a>
				ProjX2 = xLoc2 - 1;
 82e:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <xLoc2>
 832:	81 50       	subi	r24, 0x01	; 1
 834:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <ProjX2>
				ProjSeg2 = segLoc2; //+ 5;
 838:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <segLoc2>
 83c:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <ProjSeg2>
				ProjY2 = yLoc2;
 840:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <yLoc2>
 844:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <ProjY2>
				/*if (ProjSeg > 7)
				{
					ProjSeg -= 7;
					ProjY --;
				}*/
				state = ProjLeft2;
 848:	71 c0       	rjmp	.+226    	; 0x92c <ProjTick2+0x150>
			}else{
				state = ProjWait2;
			}
			break;
		case ProjRight2:
			if(ProjX2 > 83){
 84a:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <ProjX2>
 84e:	84 35       	cpi	r24, 0x54	; 84
 850:	08 f0       	brcs	.+2      	; 0x854 <ProjTick2+0x78>
 852:	46 c0       	rjmp	.+140    	; 0x8e0 <ProjTick2+0x104>
				state = ProjWait2;
			}else{
				state = ProjRight2;
				ProjX2 ++;
 854:	8f 5f       	subi	r24, 0xFF	; 255
 856:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <ProjX2>
 85a:	48 c0       	rjmp	.+144    	; 0x8ec <ProjTick2+0x110>
			}
			break;
		case ProjLeft2:
			if (ProjX2 == 0)
 85c:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <ProjX2>
 860:	88 23       	and	r24, r24
 862:	09 f4       	brne	.+2      	; 0x866 <ProjTick2+0x8a>
 864:	40 c0       	rjmp	.+128    	; 0x8e6 <ProjTick2+0x10a>
			{
				state = ProjWait2;
			}
			else {
				state = ProjLeft2;
				ProjX2 --;
 866:	81 50       	subi	r24, 0x01	; 1
 868:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <ProjX2>
 86c:	5f c0       	rjmp	.+190    	; 0x92c <ProjTick2+0x150>
			state = ProjStart2;
			break;
	}
	switch(state){//Actions
		case ProjStart2:
			ProjX2 = 84;
 86e:	84 e5       	ldi	r24, 0x54	; 84
 870:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <ProjX2>
			ProjY2 = 6;
 874:	86 e0       	ldi	r24, 0x06	; 6
 876:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <ProjY2>
			ProjSeg2 = 8;
 87a:	88 e0       	ldi	r24, 0x08	; 8
 87c:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <ProjSeg2>
			break;
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	08 95       	ret
			N5110_image(projectile[ProjSeg2], 1);
			break;
		case ProjLeft2:
			if (ProjX2 == 0)
			{
				lcd_setXY(0x80 + 1, 0x40 + ProjY2);
 886:	60 91 06 05 	lds	r22, 0x0506	; 0x800506 <ProjY2>
 88a:	60 5c       	subi	r22, 0xC0	; 192
 88c:	81 e8       	ldi	r24, 0x81	; 129
 88e:	31 de       	rcall	.-926    	; 0x4f2 <lcd_setXY>
				N5110_image(erase, 1);
 890:	61 e0       	ldi	r22, 0x01	; 1
 892:	84 e6       	ldi	r24, 0x64	; 100
 894:	94 e0       	ldi	r25, 0x04	; 4
 896:	e3 de       	rcall	.-570    	; 0x65e <N5110_image>
 898:	82 e0       	ldi	r24, 0x02	; 2
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	08 95       	ret
			}else {
				lcd_setXY(0x80 + ProjX2  +1, 0x40 + ProjY2);
 89e:	60 91 06 05 	lds	r22, 0x0506	; 0x800506 <ProjY2>
 8a2:	60 5c       	subi	r22, 0xC0	; 192
 8a4:	8f 57       	subi	r24, 0x7F	; 127
 8a6:	25 de       	rcall	.-950    	; 0x4f2 <lcd_setXY>
				N5110_image(erase, 1);
 8a8:	61 e0       	ldi	r22, 0x01	; 1
 8aa:	84 e6       	ldi	r24, 0x64	; 100
 8ac:	94 e0       	ldi	r25, 0x04	; 4
 8ae:	d7 de       	rcall	.-594    	; 0x65e <N5110_image>
				lcd_setXY(0x80 + ProjX2 , 0x40 + ProjY2);
 8b0:	60 91 06 05 	lds	r22, 0x0506	; 0x800506 <ProjY2>
 8b4:	60 5c       	subi	r22, 0xC0	; 192
 8b6:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <ProjX2>
 8ba:	80 58       	subi	r24, 0x80	; 128
 8bc:	1a de       	rcall	.-972    	; 0x4f2 <lcd_setXY>
				N5110_image(projectile[ProjSeg2], 1);
 8be:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <ProjSeg2>
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	ee 0f       	add	r30, r30
 8c6:	ff 1f       	adc	r31, r31
 8c8:	e2 59       	subi	r30, 0x92	; 146
 8ca:	fe 4f       	sbci	r31, 0xFE	; 254
 8cc:	61 e0       	ldi	r22, 0x01	; 1
 8ce:	80 81       	ld	r24, Z
 8d0:	91 81       	ldd	r25, Z+1	; 0x01
 8d2:	c5 de       	rcall	.-630    	; 0x65e <N5110_image>
 8d4:	82 e0       	ldi	r24, 0x02	; 2
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	08 95       	ret
unsigned char ProjY2;
unsigned char ProjSeg2;
int ProjTick2(int state){
	switch(state){//Transitions
		case ProjStart2:
			state = ProjWait2;
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	08 95       	ret
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	08 95       	ret
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	08 95       	ret
			ProjSeg2 = 8;
			break;
		case ProjWait2:
			break;
		case ProjRight2:
			lcd_setXY(0x80 + ProjX2 -1  , 0x40 + ProjY2);
 8ec:	60 91 06 05 	lds	r22, 0x0506	; 0x800506 <ProjY2>
 8f0:	60 5c       	subi	r22, 0xC0	; 192
 8f2:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <ProjX2>
 8f6:	81 58       	subi	r24, 0x81	; 129
			N5110_image(erase, 1);
 8f8:	fc dd       	rcall	.-1032   	; 0x4f2 <lcd_setXY>
 8fa:	61 e0       	ldi	r22, 0x01	; 1
 8fc:	84 e6       	ldi	r24, 0x64	; 100
 8fe:	94 e0       	ldi	r25, 0x04	; 4
			lcd_setXY(0x80 + ProjX2 , 0x40 + ProjY2);
 900:	ae de       	rcall	.-676    	; 0x65e <N5110_image>
 902:	60 91 06 05 	lds	r22, 0x0506	; 0x800506 <ProjY2>
 906:	60 5c       	subi	r22, 0xC0	; 192
 908:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <ProjX2>
 90c:	80 58       	subi	r24, 0x80	; 128
 90e:	f1 dd       	rcall	.-1054   	; 0x4f2 <lcd_setXY>
			N5110_image(projectile[ProjSeg2], 1);
 910:	e0 91 08 05 	lds	r30, 0x0508	; 0x800508 <ProjSeg2>
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	ee 0f       	add	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	e2 59       	subi	r30, 0x92	; 146
 91c:	fe 4f       	sbci	r31, 0xFE	; 254
 91e:	61 e0       	ldi	r22, 0x01	; 1
 920:	80 81       	ld	r24, Z
 922:	91 81       	ldd	r25, Z+1	; 0x01
 924:	9c de       	rcall	.-712    	; 0x65e <N5110_image>
			break;
 926:	83 e0       	ldi	r24, 0x03	; 3
 928:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
		default:
			break;
	}
	return state;
 92a:	08 95       	ret
			N5110_image(erase, 1);
			lcd_setXY(0x80 + ProjX2 , 0x40 + ProjY2);
			N5110_image(projectile[ProjSeg2], 1);
			break;
		case ProjLeft2:
			if (ProjX2 == 0)
 92c:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <ProjX2>
 930:	81 11       	cpse	r24, r1
 932:	b5 cf       	rjmp	.-150    	; 0x89e <ProjTick2+0xc2>
 934:	a8 cf       	rjmp	.-176    	; 0x886 <ProjTick2+0xaa>
			break;
		default:
			break;
	}
	return state;
 936:	08 95       	ret

00000938 <BuildTick>:
static unsigned char* character_bottom[] = {character, character_bottom1, character_bottom2, character_bottom3, character_bottom4, character_bottom5, character_bottom6, character_bottom7, character_bottom8};

unsigned char j = 0;
unsigned char i = 0;
int BuildTick(int state){
	switch(state){//Transitions
 938:	02 97       	sbiw	r24, 0x02	; 2
 93a:	08 f4       	brcc	.+2      	; 0x93e <BuildTick+0x6>
 93c:	60 c0       	rjmp	.+192    	; 0x9fe <BuildTick+0xc6>
			break;
	}
	switch(state){//Actions
		case BuildStart:
			//initialize bottom
			for (j = 1; j < 9; j++) // 9
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <j>
			{
				for (i=0; i<8;i++)//13
 944:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <i>
 948:	80 e0       	ldi	r24, 0x00	; 0
				{
					character_bottom[j][i] = (character[i] >> j);
 94a:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <j>
 94e:	e2 2f       	mov	r30, r18
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	ee 0f       	add	r30, r30
 954:	ff 1f       	adc	r31, r31
 956:	e6 5b       	subi	r30, 0xB6	; 182
 958:	fe 4f       	sbci	r31, 0xFE	; 254
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	01 90       	ld	r0, Z+
 95e:	f0 81       	ld	r31, Z
 960:	e0 2d       	mov	r30, r0
 962:	e8 0f       	add	r30, r24
 964:	f9 1f       	adc	r31, r25
 966:	dc 01       	movw	r26, r24
 968:	a0 50       	subi	r26, 0x00	; 0
 96a:	bf 4f       	sbci	r27, 0xFF	; 255
 96c:	8c 91       	ld	r24, X
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	02 c0       	rjmp	.+4      	; 0x976 <BuildTick+0x3e>
 972:	95 95       	asr	r25
 974:	87 95       	ror	r24
 976:	2a 95       	dec	r18
 978:	e2 f7       	brpl	.-8      	; 0x972 <BuildTick+0x3a>
 97a:	80 83       	st	Z, r24
	switch(state){//Actions
		case BuildStart:
			//initialize bottom
			for (j = 1; j < 9; j++) // 9
			{
				for (i=0; i<8;i++)//13
 97c:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <i>
 980:	8f 5f       	subi	r24, 0xFF	; 255
 982:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <i>
 986:	88 30       	cpi	r24, 0x08	; 8
 988:	00 f3       	brcs	.-64     	; 0x94a <BuildTick+0x12>
			break;
	}
	switch(state){//Actions
		case BuildStart:
			//initialize bottom
			for (j = 1; j < 9; j++) // 9
 98a:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <j>
 98e:	8f 5f       	subi	r24, 0xFF	; 255
 990:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <j>
 994:	89 30       	cpi	r24, 0x09	; 9
 996:	b0 f2       	brcs	.-84     	; 0x944 <BuildTick+0xc>
				{
					character_bottom[j][i] = (character[i] >> j);
				}
			}
			//initialize top
			for (j = 1; j < 9; j++)
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <j>
			{
				for (i=0; i<8;i++)
				{
					character_top[j][i] =  (character[i] << (8-j));
 99e:	48 e0       	ldi	r20, 0x08	; 8
 9a0:	50 e0       	ldi	r21, 0x00	; 0
				}
			}
			//initialize top
			for (j = 1; j < 9; j++)
			{
				for (i=0; i<8;i++)
 9a2:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <i>
 9a6:	80 e0       	ldi	r24, 0x00	; 0
				{
					character_top[j][i] =  (character[i] << (8-j));
 9a8:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <j>
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	f9 01       	movw	r30, r18
 9b0:	ee 0f       	add	r30, r30
 9b2:	ff 1f       	adc	r31, r31
 9b4:	e4 5a       	subi	r30, 0xA4	; 164
 9b6:	fe 4f       	sbci	r31, 0xFE	; 254
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	01 90       	ld	r0, Z+
 9bc:	f0 81       	ld	r31, Z
 9be:	e0 2d       	mov	r30, r0
 9c0:	e8 0f       	add	r30, r24
 9c2:	f9 1f       	adc	r31, r25
 9c4:	dc 01       	movw	r26, r24
 9c6:	a0 50       	subi	r26, 0x00	; 0
 9c8:	bf 4f       	sbci	r27, 0xFF	; 255
 9ca:	8c 91       	ld	r24, X
 9cc:	ba 01       	movw	r22, r20
 9ce:	62 1b       	sub	r22, r18
 9d0:	73 0b       	sbc	r23, r19
 9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <BuildTick+0x9e>
 9d4:	88 0f       	add	r24, r24
 9d6:	6a 95       	dec	r22
 9d8:	ea f7       	brpl	.-6      	; 0x9d4 <BuildTick+0x9c>
 9da:	80 83       	st	Z, r24
				}
			}
			//initialize top
			for (j = 1; j < 9; j++)
			{
				for (i=0; i<8;i++)
 9dc:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <i>
 9e0:	8f 5f       	subi	r24, 0xFF	; 255
 9e2:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <i>
 9e6:	88 30       	cpi	r24, 0x08	; 8
 9e8:	f8 f2       	brcs	.-66     	; 0x9a8 <BuildTick+0x70>
				{
					character_bottom[j][i] = (character[i] >> j);
				}
			}
			//initialize top
			for (j = 1; j < 9; j++)
 9ea:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <j>
 9ee:	8f 5f       	subi	r24, 0xFF	; 255
 9f0:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <j>
 9f4:	89 30       	cpi	r24, 0x09	; 9
 9f6:	a8 f2       	brcs	.-86     	; 0x9a2 <BuildTick+0x6a>
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	08 95       	ret
				}
			}
			break;
		case BuildCharacter:
			//build
			if(yLoc == 0){
 9fe:	60 91 f6 04 	lds	r22, 0x04F6	; 0x8004f6 <yLoc>
 a02:	61 11       	cpse	r22, r1
 a04:	0a c0       	rjmp	.+20     	; 0xa1a <BuildTick+0xe2>
				lcd_setXY(0x80 + xLoc, 0x40 + yLoc);
 a06:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <xLoc>
 a0a:	60 e4       	ldi	r22, 0x40	; 64
 a0c:	80 58       	subi	r24, 0x80	; 128
 a0e:	71 dd       	rcall	.-1310   	; 0x4f2 <lcd_setXY>
				N5110_image(character, 8);
 a10:	68 e0       	ldi	r22, 0x08	; 8
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	91 e0       	ldi	r25, 0x01	; 1
 a16:	23 de       	rcall	.-954    	; 0x65e <N5110_image>
 a18:	22 c0       	rjmp	.+68     	; 0xa5e <BuildTick+0x126>
				}else{
				lcd_setXY(0x80 + xLoc , 0x40 + yLoc);
 a1a:	60 5c       	subi	r22, 0xC0	; 192
 a1c:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <xLoc>
 a20:	80 58       	subi	r24, 0x80	; 128
 a22:	67 dd       	rcall	.-1330   	; 0x4f2 <lcd_setXY>
				N5110_image(character_bottom[segLoc], 8);
 a24:	e0 91 07 05 	lds	r30, 0x0507	; 0x800507 <segLoc>
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	ee 0f       	add	r30, r30
 a2c:	ff 1f       	adc	r31, r31
 a2e:	e6 5b       	subi	r30, 0xB6	; 182
 a30:	fe 4f       	sbci	r31, 0xFE	; 254
 a32:	68 e0       	ldi	r22, 0x08	; 8
 a34:	80 81       	ld	r24, Z
 a36:	91 81       	ldd	r25, Z+1	; 0x01
 a38:	12 de       	rcall	.-988    	; 0x65e <N5110_image>
				lcd_setXY(0x80 + xLoc, 0x40 + yLoc - 1 );
 a3a:	60 91 f6 04 	lds	r22, 0x04F6	; 0x8004f6 <yLoc>
 a3e:	61 5c       	subi	r22, 0xC1	; 193
 a40:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <xLoc>
 a44:	80 58       	subi	r24, 0x80	; 128
 a46:	55 dd       	rcall	.-1366   	; 0x4f2 <lcd_setXY>
				N5110_image(character_top[segLoc], 8);
 a48:	e0 91 07 05 	lds	r30, 0x0507	; 0x800507 <segLoc>
 a4c:	f0 e0       	ldi	r31, 0x00	; 0
 a4e:	ee 0f       	add	r30, r30
 a50:	ff 1f       	adc	r31, r31
 a52:	e4 5a       	subi	r30, 0xA4	; 164
 a54:	fe 4f       	sbci	r31, 0xFE	; 254
 a56:	68 e0       	ldi	r22, 0x08	; 8
 a58:	80 81       	ld	r24, Z
 a5a:	91 81       	ldd	r25, Z+1	; 0x01
 a5c:	00 de       	rcall	.-1024   	; 0x65e <N5110_image>
			}
			if (segLoc == 8)
 a5e:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <segLoc>
 a62:	88 30       	cpi	r24, 0x08	; 8
 a64:	51 f4       	brne	.+20     	; 0xa7a <BuildTick+0x142>
			{
				segLoc = 0;
 a66:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <segLoc>
				yLoc --;
 a6a:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <yLoc>
 a6e:	81 50       	subi	r24, 0x01	; 1
 a70:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <yLoc>
unsigned char j = 0;
unsigned char i = 0;
int BuildTick(int state){
	switch(state){//Transitions
		case BuildStart:
			state = BuildCharacter;
 a74:	81 e0       	ldi	r24, 0x01	; 1
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	08 95       	ret
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	90 e0       	ldi	r25, 0x00	; 0
			break;
		default:
			break;
	}
	return state;
}
 a7e:	08 95       	ret

00000a80 <ProjTick>:

 char ProjX;
unsigned char ProjY;
unsigned char ProjSeg;
int ProjTick(int state){
	switch(state){//Transitions
 a80:	81 30       	cpi	r24, 0x01	; 1
 a82:	91 05       	cpc	r25, r1
 a84:	59 f0       	breq	.+22     	; 0xa9c <ProjTick+0x1c>
 a86:	24 f4       	brge	.+8      	; 0xa90 <ProjTick+0x10>
 a88:	89 2b       	or	r24, r25
 a8a:	09 f4       	brne	.+2      	; 0xa8e <ProjTick+0xe>
 a8c:	78 c0       	rjmp	.+240    	; 0xb7e <ProjTick+0xfe>
 a8e:	41 c0       	rjmp	.+130    	; 0xb12 <ProjTick+0x92>
 a90:	82 30       	cpi	r24, 0x02	; 2
 a92:	91 05       	cpc	r25, r1
 a94:	a9 f1       	breq	.+106    	; 0xb00 <ProjTick+0x80>
 a96:	03 97       	sbiw	r24, 0x03	; 3
 a98:	51 f1       	breq	.+84     	; 0xaee <ProjTick+0x6e>
 a9a:	3b c0       	rjmp	.+118    	; 0xb12 <ProjTick+0x92>
		case ProjStart:
			state = ProjWait;
			break;
		case ProjWait:
			if (!GetBit(PINC, 0) && lastDir == 2){
 a9c:	30 99       	sbic	0x06, 0	; 6
 a9e:	12 c0       	rjmp	.+36     	; 0xac4 <ProjTick+0x44>
 aa0:	20 91 f9 04 	lds	r18, 0x04F9	; 0x8004f9 <lastDir>
 aa4:	22 30       	cpi	r18, 0x02	; 2
 aa6:	71 f4       	brne	.+28     	; 0xac4 <ProjTick+0x44>
				ProjX = xLoc + 8;
 aa8:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <xLoc>
 aac:	88 5f       	subi	r24, 0xF8	; 248
 aae:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <ProjX>
				ProjSeg = segLoc; //+ 5;
 ab2:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <segLoc>
 ab6:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <ProjSeg>
				ProjY = yLoc;
 aba:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <yLoc>
 abe:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <ProjY>
				/*if (ProjSeg > 7)
				{
					ProjSeg -= 7;
					ProjY --;
				}*/
				state = ProjRight;
 ac2:	66 c0       	rjmp	.+204    	; 0xb90 <ProjTick+0x110>
			}
			else if (!GetBit(PINC, 0) && lastDir == 3){
 ac4:	30 99       	sbic	0x06, 0	; 6
 ac6:	89 c0       	rjmp	.+274    	; 0xbda <ProjTick+0x15a>
 ac8:	20 91 f9 04 	lds	r18, 0x04F9	; 0x8004f9 <lastDir>
 acc:	23 30       	cpi	r18, 0x03	; 3
 ace:	09 f0       	breq	.+2      	; 0xad2 <ProjTick+0x52>
 ad0:	84 c0       	rjmp	.+264    	; 0xbda <ProjTick+0x15a>
				ProjX = xLoc - 1;
 ad2:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <xLoc>
 ad6:	81 50       	subi	r24, 0x01	; 1
 ad8:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <ProjX>
				ProjSeg = segLoc; //+ 5;
 adc:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <segLoc>
 ae0:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <ProjSeg>
				ProjY = yLoc;
 ae4:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <yLoc>
 ae8:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <ProjY>
				/*if (ProjSeg > 7)
				{
					ProjSeg -= 7;
					ProjY --;
				}*/
				state = ProjLeft;
 aec:	71 c0       	rjmp	.+226    	; 0xbd0 <ProjTick+0x150>
			}else{
				state = ProjWait;
			}
			break;
		case ProjRight:
			if(ProjX > 83){
 aee:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ProjX>
 af2:	84 35       	cpi	r24, 0x54	; 84
 af4:	08 f0       	brcs	.+2      	; 0xaf8 <ProjTick+0x78>
 af6:	46 c0       	rjmp	.+140    	; 0xb84 <ProjTick+0x104>
				state = ProjWait;
			}else{
				state = ProjRight;
				ProjX ++;
 af8:	8f 5f       	subi	r24, 0xFF	; 255
 afa:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <ProjX>
 afe:	48 c0       	rjmp	.+144    	; 0xb90 <ProjTick+0x110>
			}
			break;
		case ProjLeft:
			if (ProjX == 0)
 b00:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ProjX>
 b04:	88 23       	and	r24, r24
 b06:	09 f4       	brne	.+2      	; 0xb0a <ProjTick+0x8a>
 b08:	40 c0       	rjmp	.+128    	; 0xb8a <ProjTick+0x10a>
			{
				state = ProjWait;
			}
			else {
				state = ProjLeft;
				ProjX --;
 b0a:	81 50       	subi	r24, 0x01	; 1
 b0c:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <ProjX>
 b10:	5f c0       	rjmp	.+190    	; 0xbd0 <ProjTick+0x150>
			state = ProjStart;
			break;
	}
	switch(state){//Actions
		case ProjStart:
			ProjX = 84;
 b12:	84 e5       	ldi	r24, 0x54	; 84
 b14:	80 93 fa 04 	sts	0x04FA, r24	; 0x8004fa <ProjX>
			ProjY = 6;
 b18:	86 e0       	ldi	r24, 0x06	; 6
 b1a:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <ProjY>
			ProjSeg = 8;
 b1e:	88 e0       	ldi	r24, 0x08	; 8
 b20:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <ProjSeg>
			break;
 b24:	80 e0       	ldi	r24, 0x00	; 0
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	08 95       	ret
			N5110_image(projectile[ProjSeg], 1);
			break;
		case ProjLeft:
			if (ProjX == 0)
			{
				lcd_setXY(0x80 + 1, 0x40 + ProjY);
 b2a:	60 91 fb 04 	lds	r22, 0x04FB	; 0x8004fb <ProjY>
 b2e:	60 5c       	subi	r22, 0xC0	; 192
 b30:	81 e8       	ldi	r24, 0x81	; 129
 b32:	df dc       	rcall	.-1602   	; 0x4f2 <lcd_setXY>
				N5110_image(erase, 1);
 b34:	61 e0       	ldi	r22, 0x01	; 1
 b36:	84 e6       	ldi	r24, 0x64	; 100
 b38:	94 e0       	ldi	r25, 0x04	; 4
 b3a:	91 dd       	rcall	.-1246   	; 0x65e <N5110_image>
 b3c:	82 e0       	ldi	r24, 0x02	; 2
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	08 95       	ret
			}else {
				lcd_setXY(0x80 + ProjX  +1, 0x40 + ProjY);
 b42:	60 91 fb 04 	lds	r22, 0x04FB	; 0x8004fb <ProjY>
 b46:	60 5c       	subi	r22, 0xC0	; 192
 b48:	8f 57       	subi	r24, 0x7F	; 127
 b4a:	d3 dc       	rcall	.-1626   	; 0x4f2 <lcd_setXY>
				N5110_image(erase, 1);
 b4c:	61 e0       	ldi	r22, 0x01	; 1
 b4e:	84 e6       	ldi	r24, 0x64	; 100
 b50:	94 e0       	ldi	r25, 0x04	; 4
 b52:	85 dd       	rcall	.-1270   	; 0x65e <N5110_image>
				lcd_setXY(0x80 + ProjX , 0x40 + ProjY);
 b54:	60 91 fb 04 	lds	r22, 0x04FB	; 0x8004fb <ProjY>
 b58:	60 5c       	subi	r22, 0xC0	; 192
 b5a:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ProjX>
 b5e:	80 58       	subi	r24, 0x80	; 128
 b60:	c8 dc       	rcall	.-1648   	; 0x4f2 <lcd_setXY>
				N5110_image(projectile[ProjSeg], 1);
 b62:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <ProjSeg>
 b66:	f0 e0       	ldi	r31, 0x00	; 0
 b68:	ee 0f       	add	r30, r30
 b6a:	ff 1f       	adc	r31, r31
 b6c:	e2 59       	subi	r30, 0x92	; 146
 b6e:	fe 4f       	sbci	r31, 0xFE	; 254
 b70:	61 e0       	ldi	r22, 0x01	; 1
 b72:	80 81       	ld	r24, Z
 b74:	91 81       	ldd	r25, Z+1	; 0x01
 b76:	73 dd       	rcall	.-1306   	; 0x65e <N5110_image>
 b78:	82 e0       	ldi	r24, 0x02	; 2
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	08 95       	ret
unsigned char ProjY;
unsigned char ProjSeg;
int ProjTick(int state){
	switch(state){//Transitions
		case ProjStart:
			state = ProjWait;
 b7e:	81 e0       	ldi	r24, 0x01	; 1
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	08 95       	ret
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	08 95       	ret
 b8a:	81 e0       	ldi	r24, 0x01	; 1
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	08 95       	ret
			ProjSeg = 8;
			break;
		case ProjWait:
			break;
		case ProjRight:
			lcd_setXY(0x80 + ProjX -1  , 0x40 + ProjY);
 b90:	60 91 fb 04 	lds	r22, 0x04FB	; 0x8004fb <ProjY>
 b94:	60 5c       	subi	r22, 0xC0	; 192
 b96:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ProjX>
 b9a:	81 58       	subi	r24, 0x81	; 129
			N5110_image(erase, 1);
 b9c:	aa dc       	rcall	.-1708   	; 0x4f2 <lcd_setXY>
 b9e:	61 e0       	ldi	r22, 0x01	; 1
 ba0:	84 e6       	ldi	r24, 0x64	; 100
 ba2:	94 e0       	ldi	r25, 0x04	; 4
			lcd_setXY(0x80 + ProjX , 0x40 + ProjY);
 ba4:	5c dd       	rcall	.-1352   	; 0x65e <N5110_image>
 ba6:	60 91 fb 04 	lds	r22, 0x04FB	; 0x8004fb <ProjY>
 baa:	60 5c       	subi	r22, 0xC0	; 192
 bac:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ProjX>
 bb0:	80 58       	subi	r24, 0x80	; 128
 bb2:	9f dc       	rcall	.-1730   	; 0x4f2 <lcd_setXY>
			N5110_image(projectile[ProjSeg], 1);
 bb4:	e0 91 02 05 	lds	r30, 0x0502	; 0x800502 <ProjSeg>
 bb8:	f0 e0       	ldi	r31, 0x00	; 0
 bba:	ee 0f       	add	r30, r30
 bbc:	ff 1f       	adc	r31, r31
 bbe:	e2 59       	subi	r30, 0x92	; 146
 bc0:	fe 4f       	sbci	r31, 0xFE	; 254
 bc2:	61 e0       	ldi	r22, 0x01	; 1
 bc4:	80 81       	ld	r24, Z
 bc6:	91 81       	ldd	r25, Z+1	; 0x01
 bc8:	4a dd       	rcall	.-1388   	; 0x65e <N5110_image>
			break;
 bca:	83 e0       	ldi	r24, 0x03	; 3
 bcc:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
		default:
			break;
	}
	return state;
 bce:	08 95       	ret
			N5110_image(erase, 1);
			lcd_setXY(0x80 + ProjX , 0x40 + ProjY);
			N5110_image(projectile[ProjSeg], 1);
			break;
		case ProjLeft:
			if (ProjX == 0)
 bd0:	80 91 fa 04 	lds	r24, 0x04FA	; 0x8004fa <ProjX>
 bd4:	81 11       	cpse	r24, r1
 bd6:	b5 cf       	rjmp	.-150    	; 0xb42 <ProjTick+0xc2>
 bd8:	a8 cf       	rjmp	.-176    	; 0xb2a <ProjTick+0xaa>
			break;
		default:
			break;
	}
	return state;
}
 bda:	08 95       	ret

00000bdc <main>:
		break;
	}
	return state;
}
int main(void)
{
 bdc:	cf 93       	push	r28
 bde:	df 93       	push	r29
 be0:	cd b7       	in	r28, 0x3d	; 61
 be2:	de b7       	in	r29, 0x3e	; 62
 be4:	60 97       	sbiw	r28, 0x10	; 16
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	f8 94       	cli
 bea:	de bf       	out	0x3e, r29	; 62
 bec:	0f be       	out	0x3f, r0	; 63
 bee:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF;
 bf0:	11 b8       	out	0x01, r1	; 1
 bf2:	8f ef       	ldi	r24, 0xFF	; 255
 bf4:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF; PORTD = 0x00;
 bf6:	8a b9       	out	0x0a, r24	; 10
 bf8:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0x00; PORTC = 0xFF;
 bfa:	17 b8       	out	0x07, r1	; 7
 bfc:	88 b9       	out	0x08, r24	; 8
	//static unsigned char bottom[]= {0x00, 0x01, 0x03, 0xFF, 0x9F, 0x1F, 0xFF, 0x8F, 0x03, 0x00, 0x01, 0x00, 0x00};
	//static unsigned char top[] =   {0xC0, 0x80, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xFF, 0xFD, 0x97, 0x97, 0x17, 0x07};
	
    ADC_init();
 bfe:	64 da       	rcall	.-2872   	; 0xc8 <ADC_init>
	SPI_Init();
 c00:	06 dc       	rcall	.-2036   	; 0x40e <SPI_Init>
	N5110_init();
 c02:	69 dc       	rcall	.-1838   	; 0x4d6 <N5110_init>
 c04:	7d dc       	rcall	.-1798   	; 0x500 <N5110_clear>
	N5110_clear();
 c06:	62 e4       	ldi	r22, 0x42	; 66
	lcd_setXY(0x9F ,0x42);
 c08:	8f e9       	ldi	r24, 0x9F	; 159
 c0a:	73 dc       	rcall	.-1818   	; 0x4f2 <lcd_setXY>
 c0c:	18 e2       	ldi	r17, 0x28	; 40
 c0e:	00 e0       	ldi	r16, 0x00	; 0
 c10:	b1 2c       	mov	r11, r1
 c12:	a1 2c       	mov	r10, r1
 c14:	5b e4       	ldi	r21, 0x4B	; 75
 c16:	40 e0       	ldi	r20, 0x00	; 0
 c18:	30 e0       	ldi	r19, 0x00	; 0
 c1a:	20 e0       	ldi	r18, 0x00	; 0
 c1c:	04 c0       	rjmp	.+8      	; 0xc26 <main+0x4a>
 c1e:	16 2f       	mov	r17, r22
 c20:	07 2f       	mov	r16, r23
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 c22:	b8 2e       	mov	r11, r24
 c24:	a9 2e       	mov	r10, r25
 c26:	65 2f       	mov	r22, r21
 c28:	74 2f       	mov	r23, r20
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 c2a:	83 2f       	mov	r24, r19
 c2c:	92 2f       	mov	r25, r18
 c2e:	21 2f       	mov	r18, r17
 c30:	30 2f       	mov	r19, r16
 c32:	4b 2d       	mov	r20, r11
 c34:	5a 2d       	mov	r21, r10
 c36:	7f d1       	rcall	.+766    	; 0xf36 <__udivmodsi4>
 c38:	51 2f       	mov	r21, r17
 c3a:	40 2f       	mov	r20, r16
 c3c:	3b 2d       	mov	r19, r11
 c3e:	2a 2d       	mov	r18, r10
 c40:	61 15       	cp	r22, r1
 c42:	71 05       	cpc	r23, r1
		if( c == 0 ) { return b; }
 c44:	81 05       	cpc	r24, r1
 c46:	91 05       	cpc	r25, r1
 c48:	51 f7       	brne	.-44     	; 0xc1e <main+0x42>
 c4a:	0f 2e       	mov	r0, r31
 c4c:	fb e4       	ldi	r31, 0x4B	; 75
 c4e:	ff 2e       	mov	r15, r31
 c50:	f0 2d       	mov	r31, r0
 c52:	e1 2c       	mov	r14, r1
 c54:	d1 2c       	mov	r13, r1
 c56:	c1 2c       	mov	r12, r1
 c58:	04 c0       	rjmp	.+8      	; 0xc62 <main+0x86>
 c5a:	f6 2e       	mov	r15, r22
 c5c:	e7 2e       	mov	r14, r23
		a = b;
		b = c;
 c5e:	d8 2e       	mov	r13, r24
 c60:	c9 2e       	mov	r12, r25
 c62:	61 2f       	mov	r22, r17
 c64:	70 2f       	mov	r23, r16
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 c66:	8b 2d       	mov	r24, r11
 c68:	9a 2d       	mov	r25, r10
 c6a:	2f 2d       	mov	r18, r15
 c6c:	3e 2d       	mov	r19, r14
 c6e:	4d 2d       	mov	r20, r13
 c70:	5c 2d       	mov	r21, r12
 c72:	61 d1       	rcall	.+706    	; 0xf36 <__udivmodsi4>
 c74:	1f 2d       	mov	r17, r15
 c76:	0e 2d       	mov	r16, r14
 c78:	bd 2c       	mov	r11, r13
 c7a:	ac 2c       	mov	r10, r12
 c7c:	61 15       	cp	r22, r1
 c7e:	71 05       	cpc	r23, r1
		if( c == 0 ) { return b; }
 c80:	81 05       	cpc	r24, r1
 c82:	91 05       	cpc	r25, r1
 c84:	51 f7       	brne	.-44     	; 0xc5a <main+0x7e>
 c86:	1b e4       	ldi	r17, 0x4B	; 75
 c88:	00 e0       	ldi	r16, 0x00	; 0
 c8a:	b1 2c       	mov	r11, r1
 c8c:	a1 2c       	mov	r10, r1
 c8e:	04 c0       	rjmp	.+8      	; 0xc98 <main+0xbc>
 c90:	16 2f       	mov	r17, r22
 c92:	07 2f       	mov	r16, r23
		a = b;
		b = c;
 c94:	b8 2e       	mov	r11, r24
 c96:	a9 2e       	mov	r10, r25
 c98:	6f 2d       	mov	r22, r15
 c9a:	7e 2d       	mov	r23, r14
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 c9c:	8d 2d       	mov	r24, r13
 c9e:	9c 2d       	mov	r25, r12
 ca0:	21 2f       	mov	r18, r17
 ca2:	30 2f       	mov	r19, r16
 ca4:	4b 2d       	mov	r20, r11
 ca6:	5a 2d       	mov	r21, r10
 ca8:	46 d1       	rcall	.+652    	; 0xf36 <__udivmodsi4>
 caa:	f1 2e       	mov	r15, r17
 cac:	e0 2e       	mov	r14, r16
 cae:	db 2c       	mov	r13, r11
 cb0:	ca 2c       	mov	r12, r10
 cb2:	61 15       	cp	r22, r1
 cb4:	71 05       	cpc	r23, r1
		if( c == 0 ) { return b; }
 cb6:	81 05       	cpc	r24, r1
 cb8:	91 05       	cpc	r25, r1
 cba:	51 f7       	brne	.-44     	; 0xc90 <main+0xb4>
 cbc:	0f 2e       	mov	r0, r31
 cbe:	f8 e2       	ldi	r31, 0x28	; 40
 cc0:	ff 2e       	mov	r15, r31
 cc2:	f0 2d       	mov	r31, r0
 cc4:	e1 2c       	mov	r14, r1
 cc6:	d1 2c       	mov	r13, r1
 cc8:	c1 2c       	mov	r12, r1
 cca:	04 c0       	rjmp	.+8      	; 0xcd4 <main+0xf8>
 ccc:	f6 2e       	mov	r15, r22
 cce:	e7 2e       	mov	r14, r23
		a = b;
		b = c;
 cd0:	d8 2e       	mov	r13, r24
 cd2:	c9 2e       	mov	r12, r25
 cd4:	61 2f       	mov	r22, r17
 cd6:	70 2f       	mov	r23, r16
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 cd8:	8b 2d       	mov	r24, r11
 cda:	9a 2d       	mov	r25, r10
 cdc:	2f 2d       	mov	r18, r15
 cde:	3e 2d       	mov	r19, r14
 ce0:	4d 2d       	mov	r20, r13
 ce2:	5c 2d       	mov	r21, r12
 ce4:	28 d1       	rcall	.+592    	; 0xf36 <__udivmodsi4>
 ce6:	1f 2d       	mov	r17, r15
 ce8:	0e 2d       	mov	r16, r14
 cea:	bd 2c       	mov	r11, r13
 cec:	ac 2c       	mov	r10, r12
 cee:	61 15       	cp	r22, r1
 cf0:	71 05       	cpc	r23, r1
		if( c == 0 ) { return b; }
 cf2:	81 05       	cpc	r24, r1
 cf4:	91 05       	cpc	r25, r1
 cf6:	51 f7       	brne	.-44     	; 0xccc <main+0xf0>
 cf8:	0f 2e       	mov	r0, r31
 cfa:	f8 e2       	ldi	r31, 0x28	; 40
 cfc:	af 2e       	mov	r10, r31
 cfe:	f0 2d       	mov	r31, r0
 d00:	b1 2c       	mov	r11, r1
 d02:	00 e0       	ldi	r16, 0x00	; 0
 d04:	10 e0       	ldi	r17, 0x00	; 0
 d06:	04 c0       	rjmp	.+8      	; 0xd10 <main+0x134>
 d08:	a6 2e       	mov	r10, r22
 d0a:	b7 2e       	mov	r11, r23
		a = b;
		b = c;
 d0c:	08 2f       	mov	r16, r24
 d0e:	19 2f       	mov	r17, r25
 d10:	6f 2d       	mov	r22, r15
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 d12:	7e 2d       	mov	r23, r14
 d14:	8d 2d       	mov	r24, r13
 d16:	9c 2d       	mov	r25, r12
 d18:	2a 2d       	mov	r18, r10
 d1a:	3b 2d       	mov	r19, r11
 d1c:	40 2f       	mov	r20, r16
 d1e:	51 2f       	mov	r21, r17
 d20:	0a d1       	rcall	.+532    	; 0xf36 <__udivmodsi4>
 d22:	fa 2c       	mov	r15, r10
 d24:	eb 2c       	mov	r14, r11
 d26:	d0 2e       	mov	r13, r16
 d28:	c1 2e       	mov	r12, r17
 d2a:	61 15       	cp	r22, r1
 d2c:	71 05       	cpc	r23, r1
		if( c == 0 ) { return b; }
 d2e:	81 05       	cpc	r24, r1
 d30:	91 05       	cpc	r25, r1
 d32:	51 f7       	brne	.-44     	; 0xd08 <main+0x12c>
 d34:	6b e4       	ldi	r22, 0x4B	; 75
	tmpGCD = findGCD(tmpGCD, Tick_Coll_calc);
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
	
	//Recalculate GCD periods for scheduler
	unsigned long int Tick_Loc_period = Tick_Loc_calc/GCD;
 d36:	70 e0       	ldi	r23, 0x00	; 0
 d38:	80 e0       	ldi	r24, 0x00	; 0
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	2a 2d       	mov	r18, r10
 d3e:	3b 2d       	mov	r19, r11
 d40:	40 2f       	mov	r20, r16
 d42:	51 2f       	mov	r21, r17
 d44:	f8 d0       	rcall	.+496    	; 0xf36 <__udivmodsi4>
 d46:	69 01       	movw	r12, r18
 d48:	7a 01       	movw	r14, r20
 d4a:	68 e2       	ldi	r22, 0x28	; 40
	unsigned long int Tick_Build_period = Tick_Build_calc/GCD;
	unsigned long int Tick_Proj_period = Tick_Proj_calc/GCD;
 d4c:	70 e0       	ldi	r23, 0x00	; 0
 d4e:	80 e0       	ldi	r24, 0x00	; 0
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	2a 2d       	mov	r18, r10
 d54:	3b 2d       	mov	r19, r11
 d56:	40 2f       	mov	r20, r16
 d58:	51 2f       	mov	r21, r17
 d5a:	ed d0       	rcall	.+474    	; 0xf36 <__udivmodsi4>
 d5c:	80 e1       	ldi	r24, 0x10	; 16
 d5e:	ec e1       	ldi	r30, 0x1C	; 28
	static task task5;
	static task task6;
	static task task7;
	static task task8;
	
	task *tasks[] = {&task1, &task2, &task3, &task4, &task5, &task6, &task7, &task8};
 d60:	f1 e0       	ldi	r31, 0x01	; 1
 d62:	de 01       	movw	r26, r28
 d64:	11 96       	adiw	r26, 0x01	; 1
 d66:	01 90       	ld	r0, Z+
 d68:	0d 92       	st	X+, r0
 d6a:	8a 95       	dec	r24
 d6c:	e1 f7       	brne	.-8      	; 0xd66 <main+0x18a>
 d6e:	ef ec       	ldi	r30, 0xCF	; 207
 d70:	f3 e0       	ldi	r31, 0x03	; 3
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// Task 1
	task1.state = -1;//Task initial state.
 d72:	6f ef       	ldi	r22, 0xFF	; 255
 d74:	60 83       	st	Z, r22
 d76:	c1 82       	std	Z+1, r12	; 0x01
 d78:	d2 82       	std	Z+2, r13	; 0x02
	task1.period = Tick_Loc_period;//Task Period.
 d7a:	e3 82       	std	Z+3, r14	; 0x03
 d7c:	f4 82       	std	Z+4, r15	; 0x04
 d7e:	c5 82       	std	Z+5, r12	; 0x05
 d80:	d6 82       	std	Z+6, r13	; 0x06
	task1.elapsedTime = Tick_Loc_period;//Task current elapsed time.
 d82:	e7 82       	std	Z+7, r14	; 0x07
 d84:	f0 86       	std	Z+8, r15	; 0x08
 d86:	8d e0       	ldi	r24, 0x0D	; 13
 d88:	91 e0       	ldi	r25, 0x01	; 1
	task1.TickFct = &LocTick;//Function pointer for the tick.
 d8a:	92 87       	std	Z+10, r25	; 0x0a
 d8c:	81 87       	std	Z+9, r24	; 0x09
 d8e:	e4 ec       	ldi	r30, 0xC4	; 196
 d90:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 2
	task2.state = -1;//Task initial state.
 d92:	60 83       	st	Z, r22
 d94:	c1 82       	std	Z+1, r12	; 0x01
 d96:	d2 82       	std	Z+2, r13	; 0x02
	task2.period = Tick_Build_period;//Task Period.
 d98:	e3 82       	std	Z+3, r14	; 0x03
 d9a:	f4 82       	std	Z+4, r15	; 0x04
 d9c:	c5 82       	std	Z+5, r12	; 0x05
 d9e:	d6 82       	std	Z+6, r13	; 0x06
	task2.elapsedTime = Tick_Build_period;//Task current elapsed time.
 da0:	e7 82       	std	Z+7, r14	; 0x07
 da2:	f0 86       	std	Z+8, r15	; 0x08
 da4:	8c e9       	ldi	r24, 0x9C	; 156
 da6:	94 e0       	ldi	r25, 0x04	; 4
	task2.TickFct = &BuildTick;//Function pointer for the tick.
 da8:	92 87       	std	Z+10, r25	; 0x0a
 daa:	81 87       	std	Z+9, r24	; 0x09
 dac:	e9 eb       	ldi	r30, 0xB9	; 185
 dae:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 3
	task3.state = -1;//Task initial state.
 db0:	60 83       	st	Z, r22
 db2:	21 83       	std	Z+1, r18	; 0x01
 db4:	32 83       	std	Z+2, r19	; 0x02
	task3.period = Tick_Proj_period;//Task Period.
 db6:	43 83       	std	Z+3, r20	; 0x03
 db8:	54 83       	std	Z+4, r21	; 0x04
 dba:	25 83       	std	Z+5, r18	; 0x05
 dbc:	36 83       	std	Z+6, r19	; 0x06
	task3.elapsedTime = Tick_Proj_period;//Task current elapsed time.
 dbe:	47 83       	std	Z+7, r20	; 0x07
 dc0:	50 87       	std	Z+8, r21	; 0x08
 dc2:	80 e4       	ldi	r24, 0x40	; 64
 dc4:	95 e0       	ldi	r25, 0x05	; 5
	task3.TickFct = &ProjTick;//Function pointer for the tick.
 dc6:	92 87       	std	Z+10, r25	; 0x0a
 dc8:	81 87       	std	Z+9, r24	; 0x09
 dca:	ee ea       	ldi	r30, 0xAE	; 174
 dcc:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 4
	task4.state = -1;//Task initial state.
 dce:	60 83       	st	Z, r22
 dd0:	c1 82       	std	Z+1, r12	; 0x01
 dd2:	d2 82       	std	Z+2, r13	; 0x02
	task4.period = Tick_Loc2_period;//Task Period.
 dd4:	e3 82       	std	Z+3, r14	; 0x03
 dd6:	f4 82       	std	Z+4, r15	; 0x04
 dd8:	c5 82       	std	Z+5, r12	; 0x05
 dda:	d6 82       	std	Z+6, r13	; 0x06
	task4.elapsedTime = Tick_Loc2_period;//Task current elapsed time.
 ddc:	e7 82       	std	Z+7, r14	; 0x07
 dde:	f0 86       	std	Z+8, r15	; 0x08
 de0:	86 e8       	ldi	r24, 0x86	; 134
 de2:	90 e0       	ldi	r25, 0x00	; 0
	task4.TickFct = &LocTick2;//Function pointer for the tick.
 de4:	92 87       	std	Z+10, r25	; 0x0a
 de6:	81 87       	std	Z+9, r24	; 0x09
 de8:	e3 ea       	ldi	r30, 0xA3	; 163
 dea:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 5
	task5.state = -1;//Task initial state.
 dec:	60 83       	st	Z, r22
 dee:	c1 82       	std	Z+1, r12	; 0x01
 df0:	d2 82       	std	Z+2, r13	; 0x02
	task5.period = Tick_Build2_period;//Task Period.
 df2:	e3 82       	std	Z+3, r14	; 0x03
 df4:	f4 82       	std	Z+4, r15	; 0x04
 df6:	c5 82       	std	Z+5, r12	; 0x05
 df8:	d6 82       	std	Z+6, r13	; 0x06
	task5.elapsedTime = Tick_Build2_period;//Task current elapsed time.
 dfa:	e7 82       	std	Z+7, r14	; 0x07
 dfc:	f0 86       	std	Z+8, r15	; 0x08
 dfe:	8a e4       	ldi	r24, 0x4A	; 74
 e00:	93 e0       	ldi	r25, 0x03	; 3
	task5.TickFct = &BuildTick2;//Function pointer for the tick.
 e02:	92 87       	std	Z+10, r25	; 0x0a
 e04:	81 87       	std	Z+9, r24	; 0x09
 e06:	e8 e9       	ldi	r30, 0x98	; 152
 e08:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 6
	task6.state = -1;//Task initial state.
 e0a:	60 83       	st	Z, r22
 e0c:	21 83       	std	Z+1, r18	; 0x01
 e0e:	32 83       	std	Z+2, r19	; 0x02
	task6.period = Tick_Proj2_period;//Task Period.
 e10:	43 83       	std	Z+3, r20	; 0x03
 e12:	54 83       	std	Z+4, r21	; 0x04
 e14:	25 83       	std	Z+5, r18	; 0x05
 e16:	36 83       	std	Z+6, r19	; 0x06
	task6.elapsedTime = Tick_Proj2_period;//Task current elapsed time.
 e18:	47 83       	std	Z+7, r20	; 0x07
 e1a:	50 87       	std	Z+8, r21	; 0x08
 e1c:	8e ee       	ldi	r24, 0xEE	; 238
 e1e:	93 e0       	ldi	r25, 0x03	; 3
	task6.TickFct = &ProjTick2;//Function pointer for the tick.
 e20:	92 87       	std	Z+10, r25	; 0x0a
 e22:	81 87       	std	Z+9, r24	; 0x09
 e24:	ed e8       	ldi	r30, 0x8D	; 141
 e26:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 7
	task7.state = -1;//Task initial state.
 e28:	60 83       	st	Z, r22
 e2a:	21 83       	std	Z+1, r18	; 0x01
 e2c:	32 83       	std	Z+2, r19	; 0x02
	task7.period = Tick_Coll_period;//Task Period.
 e2e:	43 83       	std	Z+3, r20	; 0x03
 e30:	54 83       	std	Z+4, r21	; 0x04
 e32:	25 83       	std	Z+5, r18	; 0x05
 e34:	36 83       	std	Z+6, r19	; 0x06
	task7.elapsedTime = Tick_Coll_period;//Task current elapsed time.
 e36:	47 83       	std	Z+7, r20	; 0x07
 e38:	50 87       	std	Z+8, r21	; 0x08
 e3a:	8f e8       	ldi	r24, 0x8F	; 143
 e3c:	92 e0       	ldi	r25, 0x02	; 2
	task7.TickFct = &CollTick;//Function pointer for the tick.
 e3e:	92 87       	std	Z+10, r25	; 0x0a
 e40:	81 87       	std	Z+9, r24	; 0x09
 e42:	e2 e8       	ldi	r30, 0x82	; 130
 e44:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 8
	task8.state = -1;//Task initial state.
 e46:	60 83       	st	Z, r22
 e48:	21 83       	std	Z+1, r18	; 0x01
 e4a:	32 83       	std	Z+2, r19	; 0x02
	task8.period = Tick_Coll_period;//Task Period.
 e4c:	43 83       	std	Z+3, r20	; 0x03
 e4e:	54 83       	std	Z+4, r21	; 0x04
 e50:	25 83       	std	Z+5, r18	; 0x05
 e52:	36 83       	std	Z+6, r19	; 0x06
	task8.elapsedTime = Tick_Coll_period;//Task current elapsed time.
 e54:	47 83       	std	Z+7, r20	; 0x07
 e56:	50 87       	std	Z+8, r21	; 0x08
	task8.TickFct = &CollTick2;//Function pointer for the tick.
 e58:	8f ed       	ldi	r24, 0xDF	; 223
 e5a:	92 e0       	ldi	r25, 0x02	; 2
 e5c:	92 87       	std	Z+10, r25	; 0x0a
 e5e:	81 87       	std	Z+9, r24	; 0x09
	
	
	TimerSet(GCD);
 e60:	6a 2d       	mov	r22, r10
 e62:	7b 2d       	mov	r23, r11
 e64:	80 2f       	mov	r24, r16
 e66:	91 2f       	mov	r25, r17
 e68:	5d da       	rcall	.-2886   	; 0x324 <TimerSet>
 e6a:	6d da       	rcall	.-2854   	; 0x346 <TimerOn>
	TimerOn();
 e6c:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <i>
    while (1) 
    {
		

		
		for ( i = 0; i < numTasks; i++ ) {
 e70:	e0 e0       	ldi	r30, 0x00	; 0
 e72:	f0 e0       	ldi	r31, 0x00	; 0
 e74:	ee 0f       	add	r30, r30
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 e76:	ff 1f       	adc	r31, r31
 e78:	81 e0       	ldi	r24, 0x01	; 1
 e7a:	90 e0       	ldi	r25, 0x00	; 0
 e7c:	8c 0f       	add	r24, r28
 e7e:	9d 1f       	adc	r25, r29
 e80:	e8 0f       	add	r30, r24
 e82:	f9 1f       	adc	r31, r25
 e84:	00 81       	ld	r16, Z
 e86:	11 81       	ldd	r17, Z+1	; 0x01
 e88:	d8 01       	movw	r26, r16
 e8a:	15 96       	adiw	r26, 0x05	; 5
 e8c:	4d 91       	ld	r20, X+
 e8e:	5d 91       	ld	r21, X+
 e90:	6d 91       	ld	r22, X+
 e92:	7c 91       	ld	r23, X
 e94:	18 97       	sbiw	r26, 0x08	; 8
 e96:	11 96       	adiw	r26, 0x01	; 1
 e98:	8d 91       	ld	r24, X+
 e9a:	9d 91       	ld	r25, X+
 e9c:	0d 90       	ld	r0, X+
 e9e:	bc 91       	ld	r27, X
 ea0:	a0 2d       	mov	r26, r0
 ea2:	48 17       	cp	r20, r24
 ea4:	59 07       	cpc	r21, r25
 ea6:	6a 07       	cpc	r22, r26
 ea8:	7b 07       	cpc	r23, r27
 eaa:	e9 f4       	brne	.+58     	; 0xee6 <main+0x30a>
 eac:	f8 01       	movw	r30, r16
 eae:	80 81       	ld	r24, Z
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 eb0:	01 84       	ldd	r0, Z+9	; 0x09
 eb2:	f2 85       	ldd	r31, Z+10	; 0x0a
 eb4:	e0 2d       	mov	r30, r0
 eb6:	08 2e       	mov	r0, r24
 eb8:	00 0c       	add	r0, r0
 eba:	99 0b       	sbc	r25, r25
 ebc:	09 95       	icall
 ebe:	d8 01       	movw	r26, r16
 ec0:	8c 93       	st	X, r24
 ec2:	e0 91 da 03 	lds	r30, 0x03DA	; 0x8003da <i>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 ec6:	f0 e0       	ldi	r31, 0x00	; 0
 ec8:	ee 0f       	add	r30, r30
 eca:	ff 1f       	adc	r31, r31
 ecc:	81 e0       	ldi	r24, 0x01	; 1
 ece:	90 e0       	ldi	r25, 0x00	; 0
 ed0:	8c 0f       	add	r24, r28
 ed2:	9d 1f       	adc	r25, r29
 ed4:	e8 0f       	add	r30, r24
 ed6:	f9 1f       	adc	r31, r25
 ed8:	01 90       	ld	r0, Z+
 eda:	f0 81       	ld	r31, Z
 edc:	e0 2d       	mov	r30, r0
 ede:	15 82       	std	Z+5, r1	; 0x05
 ee0:	16 82       	std	Z+6, r1	; 0x06
 ee2:	17 82       	std	Z+7, r1	; 0x07
 ee4:	10 86       	std	Z+8, r1	; 0x08
 ee6:	40 91 da 03 	lds	r20, 0x03DA	; 0x8003da <i>
			}
			tasks[i]->elapsedTime += 1;
 eea:	a4 2f       	mov	r26, r20
 eec:	b0 e0       	ldi	r27, 0x00	; 0
 eee:	aa 0f       	add	r26, r26
 ef0:	bb 1f       	adc	r27, r27
 ef2:	e1 e0       	ldi	r30, 0x01	; 1
 ef4:	f0 e0       	ldi	r31, 0x00	; 0
 ef6:	ec 0f       	add	r30, r28
 ef8:	fd 1f       	adc	r31, r29
 efa:	ae 0f       	add	r26, r30
 efc:	bf 1f       	adc	r27, r31
 efe:	2d 91       	ld	r18, X+
 f00:	3c 91       	ld	r19, X
 f02:	f9 01       	movw	r30, r18
 f04:	85 81       	ldd	r24, Z+5	; 0x05
 f06:	96 81       	ldd	r25, Z+6	; 0x06
 f08:	a7 81       	ldd	r26, Z+7	; 0x07
 f0a:	b0 85       	ldd	r27, Z+8	; 0x08
 f0c:	01 96       	adiw	r24, 0x01	; 1
 f0e:	a1 1d       	adc	r26, r1
 f10:	b1 1d       	adc	r27, r1
 f12:	85 83       	std	Z+5, r24	; 0x05
 f14:	96 83       	std	Z+6, r25	; 0x06
 f16:	a7 83       	std	Z+7, r26	; 0x07
 f18:	b0 87       	std	Z+8, r27	; 0x08
 f1a:	e1 e0       	ldi	r30, 0x01	; 1
 f1c:	e4 0f       	add	r30, r20
    while (1) 
    {
		

		
		for ( i = 0; i < numTasks; i++ ) {
 f1e:	e0 93 da 03 	sts	0x03DA, r30	; 0x8003da <i>
 f22:	e8 30       	cpi	r30, 0x08	; 8
 f24:	08 f4       	brcc	.+2      	; 0xf28 <main+0x34c>
 f26:	a5 cf       	rjmp	.-182    	; 0xe72 <main+0x296>
 f28:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <TimerFlag>
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
				
		while(!TimerFlag);
 f2c:	88 23       	and	r24, r24
 f2e:	e1 f3       	breq	.-8      	; 0xf28 <main+0x34c>
 f30:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <TimerFlag>
		TimerFlag = 0;
 f34:	9b cf       	rjmp	.-202    	; 0xe6c <main+0x290>

00000f36 <__udivmodsi4>:
 f36:	a1 e2       	ldi	r26, 0x21	; 33
		
		
		
    }
 f38:	1a 2e       	mov	r1, r26
 f3a:	aa 1b       	sub	r26, r26
 f3c:	bb 1b       	sub	r27, r27
 f3e:	fd 01       	movw	r30, r26
 f40:	0d c0       	rjmp	.+26     	; 0xf5c <__udivmodsi4_ep>

00000f42 <__udivmodsi4_loop>:
 f42:	aa 1f       	adc	r26, r26
 f44:	bb 1f       	adc	r27, r27
 f46:	ee 1f       	adc	r30, r30
 f48:	ff 1f       	adc	r31, r31
 f4a:	a2 17       	cp	r26, r18
 f4c:	b3 07       	cpc	r27, r19
 f4e:	e4 07       	cpc	r30, r20
 f50:	f5 07       	cpc	r31, r21
 f52:	20 f0       	brcs	.+8      	; 0xf5c <__udivmodsi4_ep>
 f54:	a2 1b       	sub	r26, r18
 f56:	b3 0b       	sbc	r27, r19
 f58:	e4 0b       	sbc	r30, r20
 f5a:	f5 0b       	sbc	r31, r21

00000f5c <__udivmodsi4_ep>:
 f5c:	66 1f       	adc	r22, r22
 f5e:	77 1f       	adc	r23, r23
 f60:	88 1f       	adc	r24, r24
 f62:	99 1f       	adc	r25, r25
 f64:	1a 94       	dec	r1
 f66:	69 f7       	brne	.-38     	; 0xf42 <__udivmodsi4_loop>
 f68:	60 95       	com	r22
 f6a:	70 95       	com	r23
 f6c:	80 95       	com	r24
 f6e:	90 95       	com	r25
 f70:	9b 01       	movw	r18, r22
 f72:	ac 01       	movw	r20, r24
 f74:	bd 01       	movw	r22, r26
 f76:	cf 01       	movw	r24, r30
 f78:	08 95       	ret

00000f7a <_exit>:
 f7a:	f8 94       	cli

00000f7c <__stop_program>:
 f7c:	ff cf       	rjmp	.-2      	; 0xf7c <__stop_program>
