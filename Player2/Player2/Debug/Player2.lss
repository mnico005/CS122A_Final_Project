
Player2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000282  00800100  0000109e  00001132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000109e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000018b  00800382  00800382  000013b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002167  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aef  00000000  00000000  0000370b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012da  00000000  00000000  000041fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  000054d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ccc  00000000  00000000  00005868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001130  00000000  00000000  00006534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	a0 c0       	rjmp	.+320    	; 0x176 <__vector_13>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	13 e0       	ldi	r17, 0x03	; 3
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e9       	ldi	r30, 0x9E	; 158
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 38       	cpi	r26, 0x82	; 130
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	25 e0       	ldi	r18, 0x05	; 5
      b4:	a2 e8       	ldi	r26, 0x82	; 130
      b6:	b3 e0       	ldi	r27, 0x03	; 3
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ad 30       	cpi	r26, 0x0D	; 13
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	1a d6       	rcall	.+3124   	; 0xcf8 <main>
      c4:	ea c7       	rjmp	.+4052   	; 0x109a <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
      c8:	80 ec       	ldi	r24, 0xC0	; 192
      ca:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
      ce:	ea e7       	ldi	r30, 0x7A	; 122
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	87 68       	ori	r24, 0x87	; 135
      d6:	80 83       	st	Z, r24
      d8:	08 95       	ret

000000da <analog_read>:
      da:	ec e7       	ldi	r30, 0x7C	; 124
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	90 81       	ld	r25, Z
      e0:	98 7f       	andi	r25, 0xF8	; 248
      e2:	87 70       	andi	r24, 0x07	; 7
      e4:	89 2b       	or	r24, r25
      e6:	80 83       	st	Z, r24
      e8:	ea e7       	ldi	r30, 0x7A	; 122
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	80 64       	ori	r24, 0x40	; 64
      f0:	80 83       	st	Z, r24
      f2:	80 81       	ld	r24, Z
      f4:	84 ff       	sbrs	r24, 4
      f6:	fd cf       	rjmp	.-6      	; 0xf2 <analog_read+0x18>
      f8:	ea e7       	ldi	r30, 0x7A	; 122
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	80 61       	ori	r24, 0x10	; 16
     100:	80 83       	st	Z, r24
     102:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     106:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     10a:	08 95       	ret

0000010c <TimerSet>:
     10c:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <_avr_timer_M>
     110:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <_avr_timer_M+0x1>
     114:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <_avr_timer_M+0x2>
     118:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <_avr_timer_M+0x3>
     11c:	60 93 f0 04 	sts	0x04F0, r22	; 0x8004f0 <_avr_timer_cntcurr>
     120:	70 93 f1 04 	sts	0x04F1, r23	; 0x8004f1 <_avr_timer_cntcurr+0x1>
     124:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <_avr_timer_cntcurr+0x2>
     128:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <_avr_timer_cntcurr+0x3>
     12c:	08 95       	ret

0000012e <TimerOn>:
     12e:	8b e0       	ldi	r24, 0x0B	; 11
     130:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     134:	8d e7       	ldi	r24, 0x7D	; 125
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     13c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     146:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     14a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     14e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_avr_timer_M>
     152:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_avr_timer_M+0x1>
     156:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <_avr_timer_M+0x2>
     15a:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <_avr_timer_M+0x3>
     15e:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <_avr_timer_cntcurr>
     162:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <_avr_timer_cntcurr+0x1>
     166:	a0 93 f2 04 	sts	0x04F2, r26	; 0x8004f2 <_avr_timer_cntcurr+0x2>
     16a:	b0 93 f3 04 	sts	0x04F3, r27	; 0x8004f3 <_avr_timer_cntcurr+0x3>
     16e:	8f b7       	in	r24, 0x3f	; 63
     170:	80 68       	ori	r24, 0x80	; 128
     172:	8f bf       	out	0x3f, r24	; 63
     174:	08 95       	ret

00000176 <__vector_13>:
     176:	1f 92       	push	r1
     178:	0f 92       	push	r0
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	0f 92       	push	r0
     17e:	11 24       	eor	r1, r1
     180:	8f 93       	push	r24
     182:	9f 93       	push	r25
     184:	af 93       	push	r26
     186:	bf 93       	push	r27
     188:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <_avr_timer_cntcurr>
     18c:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <_avr_timer_cntcurr+0x1>
     190:	a0 91 f2 04 	lds	r26, 0x04F2	; 0x8004f2 <_avr_timer_cntcurr+0x2>
     194:	b0 91 f3 04 	lds	r27, 0x04F3	; 0x8004f3 <_avr_timer_cntcurr+0x3>
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	a1 09       	sbc	r26, r1
     19c:	b1 09       	sbc	r27, r1
     19e:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <_avr_timer_cntcurr>
     1a2:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <_avr_timer_cntcurr+0x1>
     1a6:	a0 93 f2 04 	sts	0x04F2, r26	; 0x8004f2 <_avr_timer_cntcurr+0x2>
     1aa:	b0 93 f3 04 	sts	0x04F3, r27	; 0x8004f3 <_avr_timer_cntcurr+0x3>
     1ae:	89 2b       	or	r24, r25
     1b0:	8a 2b       	or	r24, r26
     1b2:	8b 2b       	or	r24, r27
     1b4:	99 f4       	brne	.+38     	; 0x1dc <__vector_13+0x66>
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <TimerFlag>
     1bc:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <_avr_timer_M>
     1c0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <_avr_timer_M+0x1>
     1c4:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <_avr_timer_M+0x2>
     1c8:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <_avr_timer_M+0x3>
     1cc:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <_avr_timer_cntcurr>
     1d0:	90 93 f1 04 	sts	0x04F1, r25	; 0x8004f1 <_avr_timer_cntcurr+0x1>
     1d4:	a0 93 f2 04 	sts	0x04F2, r26	; 0x8004f2 <_avr_timer_cntcurr+0x2>
     1d8:	b0 93 f3 04 	sts	0x04F3, r27	; 0x8004f3 <_avr_timer_cntcurr+0x3>
     1dc:	bf 91       	pop	r27
     1de:	af 91       	pop	r26
     1e0:	9f 91       	pop	r25
     1e2:	8f 91       	pop	r24
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <SPI_SS_Enable>:
     1ee:	2c 98       	cbi	0x05, 4	; 5
     1f0:	08 95       	ret

000001f2 <SPI_SS_Disable>:
     1f2:	2c 9a       	sbi	0x05, 4	; 5
     1f4:	08 95       	ret

000001f6 <SPI_Init>:
     1f6:	8b eb       	ldi	r24, 0xBB	; 187
     1f8:	84 b9       	out	0x04, r24	; 4
     1fa:	28 9a       	sbi	0x05, 0	; 5
     1fc:	2b 9a       	sbi	0x05, 3	; 5
     1fe:	26 98       	cbi	0x04, 6	; 4
     200:	2c 9a       	sbi	0x05, 4	; 5
     202:	81 e5       	ldi	r24, 0x51	; 81
     204:	8c bd       	out	0x2c, r24	; 44
     206:	08 95       	ret

00000208 <SPI_Write>:
     208:	8e bd       	out	0x2e, r24	; 46
     20a:	0d b4       	in	r0, 0x2d	; 45
     20c:	07 fe       	sbrs	r0, 7
     20e:	fd cf       	rjmp	.-6      	; 0x20a <SPI_Write+0x2>
     210:	08 95       	ret

00000212 <N5110_Cmnd>:
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
     216:	29 98       	cbi	0x05, 1	; 5
     218:	ea df       	rcall	.-44     	; 0x1ee <SPI_SS_Enable>
     21a:	8c 2f       	mov	r24, r28
     21c:	f5 df       	rcall	.-22     	; 0x208 <SPI_Write>
     21e:	29 9a       	sbi	0x05, 1	; 5
     220:	e8 df       	rcall	.-48     	; 0x1f2 <SPI_SS_Disable>
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <N5110_Data>:
     226:	ef 92       	push	r14
     228:	ff 92       	push	r15
     22a:	0f 93       	push	r16
     22c:	1f 93       	push	r17
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
     232:	8c 01       	movw	r16, r24
     234:	29 9a       	sbi	0x05, 1	; 5
     236:	db df       	rcall	.-74     	; 0x1ee <SPI_SS_Enable>
     238:	f8 01       	movw	r30, r16
     23a:	01 90       	ld	r0, Z+
     23c:	00 20       	and	r0, r0
     23e:	e9 f7       	brne	.-6      	; 0x23a <N5110_Data+0x14>
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	e0 1b       	sub	r30, r16
     244:	f1 0b       	sbc	r31, r17
     246:	1e 16       	cp	r1, r30
     248:	1f 06       	cpc	r1, r31
     24a:	2c f5       	brge	.+74     	; 0x296 <N5110_Data+0x70>
     24c:	e8 01       	movw	r28, r16
     24e:	0e 0f       	add	r16, r30
     250:	1f 1f       	adc	r17, r31
     252:	1e c0       	rjmp	.+60     	; 0x290 <N5110_Data+0x6a>
     254:	28 81       	ld	r18, Y
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	20 52       	subi	r18, 0x20	; 32
     25a:	31 09       	sbc	r19, r1
     25c:	f9 01       	movw	r30, r18
     25e:	ee 0f       	add	r30, r30
     260:	ff 1f       	adc	r31, r31
     262:	ee 0f       	add	r30, r30
     264:	ff 1f       	adc	r31, r31
     266:	e2 0f       	add	r30, r18
     268:	f3 1f       	adc	r31, r19
     26a:	ee 55       	subi	r30, 0x5E	; 94
     26c:	fe 4f       	sbci	r31, 0xFE	; 254
     26e:	ee 0d       	add	r30, r14
     270:	ff 1d       	adc	r31, r15
     272:	80 81       	ld	r24, Z
     274:	c9 df       	rcall	.-110    	; 0x208 <SPI_Write>
     276:	8f ef       	ldi	r24, 0xFF	; 255
     278:	e8 1a       	sub	r14, r24
     27a:	f8 0a       	sbc	r15, r24
     27c:	85 e0       	ldi	r24, 0x05	; 5
     27e:	e8 16       	cp	r14, r24
     280:	f1 04       	cpc	r15, r1
     282:	41 f7       	brne	.-48     	; 0x254 <N5110_Data+0x2e>
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	c0 df       	rcall	.-128    	; 0x208 <SPI_Write>
     288:	21 96       	adiw	r28, 0x01	; 1
     28a:	0c 17       	cp	r16, r28
     28c:	1d 07       	cpc	r17, r29
     28e:	19 f0       	breq	.+6      	; 0x296 <N5110_Data+0x70>
     290:	e1 2c       	mov	r14, r1
     292:	f1 2c       	mov	r15, r1
     294:	df cf       	rjmp	.-66     	; 0x254 <N5110_Data+0x2e>
     296:	ad df       	rcall	.-166    	; 0x1f2 <SPI_SS_Disable>
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	ff 90       	pop	r15
     2a2:	ef 90       	pop	r14
     2a4:	08 95       	ret

000002a6 <N5110_Reset>:
     2a6:	28 98       	cbi	0x05, 0	; 5
     2a8:	2f ef       	ldi	r18, 0xFF	; 255
     2aa:	80 e7       	ldi	r24, 0x70	; 112
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	21 50       	subi	r18, 0x01	; 1
     2b0:	80 40       	sbci	r24, 0x00	; 0
     2b2:	90 40       	sbci	r25, 0x00	; 0
     2b4:	e1 f7       	brne	.-8      	; 0x2ae <N5110_Reset+0x8>
     2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <N5110_Reset+0x12>
     2b8:	00 00       	nop
     2ba:	28 9a       	sbi	0x05, 0	; 5
     2bc:	08 95       	ret

000002be <N5110_init>:
     2be:	f3 df       	rcall	.-26     	; 0x2a6 <N5110_Reset>
     2c0:	81 e2       	ldi	r24, 0x21	; 33
     2c2:	a7 df       	rcall	.-178    	; 0x212 <N5110_Cmnd>
     2c4:	80 ec       	ldi	r24, 0xC0	; 192
     2c6:	a5 df       	rcall	.-182    	; 0x212 <N5110_Cmnd>
     2c8:	87 e0       	ldi	r24, 0x07	; 7
     2ca:	a3 df       	rcall	.-186    	; 0x212 <N5110_Cmnd>
     2cc:	83 e1       	ldi	r24, 0x13	; 19
     2ce:	a1 df       	rcall	.-190    	; 0x212 <N5110_Cmnd>
     2d0:	80 e2       	ldi	r24, 0x20	; 32
     2d2:	9f df       	rcall	.-194    	; 0x212 <N5110_Cmnd>
     2d4:	8c e0       	ldi	r24, 0x0C	; 12
     2d6:	9d cf       	rjmp	.-198    	; 0x212 <N5110_Cmnd>
     2d8:	08 95       	ret

000002da <lcd_setXY>:
     2da:	cf 93       	push	r28
     2dc:	c6 2f       	mov	r28, r22
     2de:	99 df       	rcall	.-206    	; 0x212 <N5110_Cmnd>
     2e0:	8c 2f       	mov	r24, r28
     2e2:	97 df       	rcall	.-210    	; 0x212 <N5110_Cmnd>
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <N5110_clear>:
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	80 df       	rcall	.-256    	; 0x1ee <SPI_SS_Enable>
     2ee:	29 9a       	sbi	0x05, 1	; 5
     2f0:	c8 ef       	ldi	r28, 0xF8	; 248
     2f2:	d1 e0       	ldi	r29, 0x01	; 1
     2f4:	80 e0       	ldi	r24, 0x00	; 0
     2f6:	88 df       	rcall	.-240    	; 0x208 <SPI_Write>
     2f8:	21 97       	sbiw	r28, 0x01	; 1
     2fa:	e1 f7       	brne	.-8      	; 0x2f4 <N5110_clear+0xc>
     2fc:	29 98       	cbi	0x05, 1	; 5
     2fe:	79 df       	rcall	.-270    	; 0x1f2 <SPI_SS_Disable>
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <CollTick>:
     306:	81 30       	cpi	r24, 0x01	; 1
     308:	91 05       	cpc	r25, r1
     30a:	39 f0       	breq	.+14     	; 0x31a <CollTick+0x14>
     30c:	82 30       	cpi	r24, 0x02	; 2
     30e:	91 05       	cpc	r25, r1
     310:	e1 f1       	breq	.+120    	; 0x38a <CollTick+0x84>
     312:	89 2b       	or	r24, r25
     314:	09 f0       	breq	.+2      	; 0x318 <CollTick+0x12>
     316:	44 c0       	rjmp	.+136    	; 0x3a0 <CollTick+0x9a>
     318:	40 c0       	rjmp	.+128    	; 0x39a <CollTick+0x94>
     31a:	20 91 02 05 	lds	r18, 0x0502	; 0x800502 <yLoc2>
     31e:	40 91 fd 04 	lds	r20, 0x04FD	; 0x8004fd <ProjY>
     322:	24 13       	cpse	r18, r20
     324:	16 c0       	rjmp	.+44     	; 0x352 <CollTick+0x4c>
     326:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <ProjSeg>
     32a:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <segLoc2>
     32e:	32 17       	cp	r19, r18
     330:	c8 f1       	brcs	.+114    	; 0x3a4 <CollTick+0x9e>
     332:	50 91 fc 04 	lds	r21, 0x04FC	; 0x8004fc <ProjX>
     336:	40 91 0c 05 	lds	r20, 0x050C	; 0x80050c <xLoc2>
     33a:	65 2f       	mov	r22, r21
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	24 2f       	mov	r18, r20
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	28 5f       	subi	r18, 0xF8	; 248
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	62 17       	cp	r22, r18
     348:	73 07       	cpc	r23, r19
     34a:	64 f5       	brge	.+88     	; 0x3a4 <CollTick+0x9e>
     34c:	45 17       	cp	r20, r21
     34e:	e8 f0       	brcs	.+58     	; 0x38a <CollTick+0x84>
     350:	08 95       	ret
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	21 50       	subi	r18, 0x01	; 1
     356:	31 09       	sbc	r19, r1
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	24 17       	cp	r18, r20
     35c:	35 07       	cpc	r19, r21
     35e:	11 f5       	brne	.+68     	; 0x3a4 <CollTick+0x9e>
     360:	30 91 05 05 	lds	r19, 0x0505	; 0x800505 <ProjSeg>
     364:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <segLoc2>
     368:	32 17       	cp	r19, r18
     36a:	e0 f4       	brcc	.+56     	; 0x3a4 <CollTick+0x9e>
     36c:	50 91 fc 04 	lds	r21, 0x04FC	; 0x8004fc <ProjX>
     370:	40 91 0c 05 	lds	r20, 0x050C	; 0x80050c <xLoc2>
     374:	65 2f       	mov	r22, r21
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	24 2f       	mov	r18, r20
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	28 5f       	subi	r18, 0xF8	; 248
     37e:	3f 4f       	sbci	r19, 0xFF	; 255
     380:	62 17       	cp	r22, r18
     382:	73 07       	cpc	r23, r19
     384:	7c f4       	brge	.+30     	; 0x3a4 <CollTick+0x9e>
     386:	45 17       	cp	r20, r21
     388:	68 f4       	brcc	.+26     	; 0x3a4 <CollTick+0x9e>
     38a:	ae df       	rcall	.-164    	; 0x2e8 <N5110_clear>
     38c:	62 e4       	ldi	r22, 0x42	; 66
     38e:	80 e8       	ldi	r24, 0x80	; 128
     390:	a4 df       	rcall	.-184    	; 0x2da <lcd_setXY>
     392:	8c e2       	ldi	r24, 0x2C	; 44
     394:	91 e0       	ldi	r25, 0x01	; 1
     396:	47 df       	rcall	.-370    	; 0x226 <N5110_Data>
     398:	ff cf       	rjmp	.-2      	; 0x398 <CollTick+0x92>
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	08 95       	ret
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	08 95       	ret

000003a6 <CollTick2>:
     3a6:	81 30       	cpi	r24, 0x01	; 1
     3a8:	91 05       	cpc	r25, r1
     3aa:	39 f0       	breq	.+14     	; 0x3ba <CollTick2+0x14>
     3ac:	82 30       	cpi	r24, 0x02	; 2
     3ae:	91 05       	cpc	r25, r1
     3b0:	e1 f1       	breq	.+120    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3b2:	89 2b       	or	r24, r25
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <CollTick2+0x12>
     3b6:	44 c0       	rjmp	.+136    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3b8:	40 c0       	rjmp	.+128    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     3ba:	20 91 f7 04 	lds	r18, 0x04F7	; 0x8004f7 <yLoc>
     3be:	40 91 09 05 	lds	r20, 0x0509	; 0x800509 <ProjY2>
     3c2:	24 13       	cpse	r18, r20
     3c4:	16 c0       	rjmp	.+44     	; 0x3f2 <CollTick2+0x4c>
     3c6:	30 91 0b 05 	lds	r19, 0x050B	; 0x80050b <ProjSeg2>
     3ca:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <segLoc>
     3ce:	32 17       	cp	r19, r18
     3d0:	c8 f1       	brcs	.+114    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3d2:	50 91 08 05 	lds	r21, 0x0508	; 0x800508 <ProjX2>
     3d6:	40 91 03 05 	lds	r20, 0x0503	; 0x800503 <xLoc>
     3da:	65 2f       	mov	r22, r21
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	24 2f       	mov	r18, r20
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	28 5f       	subi	r18, 0xF8	; 248
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	62 17       	cp	r22, r18
     3e8:	73 07       	cpc	r23, r19
     3ea:	64 f5       	brge	.+88     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3ec:	45 17       	cp	r20, r21
     3ee:	e8 f0       	brcs	.+58     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     3f0:	08 95       	ret
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	21 50       	subi	r18, 0x01	; 1
     3f6:	31 09       	sbc	r19, r1
     3f8:	50 e0       	ldi	r21, 0x00	; 0
     3fa:	24 17       	cp	r18, r20
     3fc:	35 07       	cpc	r19, r21
     3fe:	11 f5       	brne	.+68     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     400:	30 91 0b 05 	lds	r19, 0x050B	; 0x80050b <ProjSeg2>
     404:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <segLoc>
     408:	32 17       	cp	r19, r18
     40a:	e0 f4       	brcc	.+56     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     40c:	50 91 08 05 	lds	r21, 0x0508	; 0x800508 <ProjX2>
     410:	40 91 03 05 	lds	r20, 0x0503	; 0x800503 <xLoc>
     414:	65 2f       	mov	r22, r21
     416:	70 e0       	ldi	r23, 0x00	; 0
     418:	24 2f       	mov	r18, r20
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	28 5f       	subi	r18, 0xF8	; 248
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	62 17       	cp	r22, r18
     422:	73 07       	cpc	r23, r19
     424:	7c f4       	brge	.+30     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     426:	45 17       	cp	r20, r21
     428:	68 f4       	brcc	.+26     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     42a:	5e df       	rcall	.-324    	; 0x2e8 <N5110_clear>
     42c:	62 e4       	ldi	r22, 0x42	; 66
     42e:	80 e8       	ldi	r24, 0x80	; 128
     430:	54 df       	rcall	.-344    	; 0x2da <lcd_setXY>
     432:	8b e3       	ldi	r24, 0x3B	; 59
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	f7 de       	rcall	.-530    	; 0x226 <N5110_Data>
     438:	ff cf       	rjmp	.-2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	08 95       	ret
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	08 95       	ret

00000446 <N5110_image>:
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	8c 01       	movw	r16, r24
     452:	f6 2e       	mov	r15, r22
     454:	cc de       	rcall	.-616    	; 0x1ee <SPI_SS_Enable>
     456:	29 9a       	sbi	0x05, 1	; 5
     458:	ff 20       	and	r15, r15
     45a:	41 f0       	breq	.+16     	; 0x46c <N5110_image+0x26>
     45c:	e8 01       	movw	r28, r16
     45e:	0f 0d       	add	r16, r15
     460:	11 1d       	adc	r17, r1
     462:	89 91       	ld	r24, Y+
     464:	d1 de       	rcall	.-606    	; 0x208 <SPI_Write>
     466:	c0 17       	cp	r28, r16
     468:	d1 07       	cpc	r29, r17
     46a:	d9 f7       	brne	.-10     	; 0x462 <N5110_image+0x1c>
     46c:	29 98       	cbi	0x05, 1	; 5
     46e:	c1 de       	rcall	.-638    	; 0x1f2 <SPI_SS_Disable>
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	1f 91       	pop	r17
     476:	0f 91       	pop	r16
     478:	ff 90       	pop	r15
     47a:	08 95       	ret

0000047c <BuildTick2>:
     47c:	02 97       	sbiw	r24, 0x02	; 2
     47e:	08 f4       	brcc	.+2      	; 0x482 <BuildTick2+0x6>
     480:	60 c0       	rjmp	.+192    	; 0x542 <BuildTick2+0xc6>
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <j2>
     488:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <i2>
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <j2>
     492:	e2 2f       	mov	r30, r18
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	ee 0f       	add	r30, r30
     498:	ff 1f       	adc	r31, r31
     49a:	e2 58       	subi	r30, 0x82	; 130
     49c:	fe 4f       	sbci	r31, 0xFE	; 254
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	01 90       	ld	r0, Z+
     4a2:	f0 81       	ld	r31, Z
     4a4:	e0 2d       	mov	r30, r0
     4a6:	e8 0f       	add	r30, r24
     4a8:	f9 1f       	adc	r31, r25
     4aa:	dc 01       	movw	r26, r24
     4ac:	a0 5f       	subi	r26, 0xF0	; 240
     4ae:	be 4f       	sbci	r27, 0xFE	; 254
     4b0:	8c 91       	ld	r24, X
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <BuildTick2+0x3e>
     4b6:	95 95       	asr	r25
     4b8:	87 95       	ror	r24
     4ba:	2a 95       	dec	r18
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <BuildTick2+0x3a>
     4be:	80 83       	st	Z, r24
     4c0:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <i2>
     4c4:	8f 5f       	subi	r24, 0xFF	; 255
     4c6:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <i2>
     4ca:	88 30       	cpi	r24, 0x08	; 8
     4cc:	00 f3       	brcs	.-64     	; 0x48e <BuildTick2+0x12>
     4ce:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <j2>
     4d2:	8f 5f       	subi	r24, 0xFF	; 255
     4d4:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <j2>
     4d8:	89 30       	cpi	r24, 0x09	; 9
     4da:	b0 f2       	brcs	.-84     	; 0x488 <BuildTick2+0xc>
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <j2>
     4e2:	48 e0       	ldi	r20, 0x08	; 8
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <i2>
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	20 91 66 04 	lds	r18, 0x0466	; 0x800466 <j2>
     4f0:	30 e0       	ldi	r19, 0x00	; 0
     4f2:	f9 01       	movw	r30, r18
     4f4:	ee 0f       	add	r30, r30
     4f6:	ff 1f       	adc	r31, r31
     4f8:	e0 57       	subi	r30, 0x70	; 112
     4fa:	fe 4f       	sbci	r31, 0xFE	; 254
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	01 90       	ld	r0, Z+
     500:	f0 81       	ld	r31, Z
     502:	e0 2d       	mov	r30, r0
     504:	e8 0f       	add	r30, r24
     506:	f9 1f       	adc	r31, r25
     508:	dc 01       	movw	r26, r24
     50a:	a0 5f       	subi	r26, 0xF0	; 240
     50c:	be 4f       	sbci	r27, 0xFE	; 254
     50e:	8c 91       	ld	r24, X
     510:	ba 01       	movw	r22, r20
     512:	62 1b       	sub	r22, r18
     514:	73 0b       	sbc	r23, r19
     516:	01 c0       	rjmp	.+2      	; 0x51a <BuildTick2+0x9e>
     518:	88 0f       	add	r24, r24
     51a:	6a 95       	dec	r22
     51c:	ea f7       	brpl	.-6      	; 0x518 <BuildTick2+0x9c>
     51e:	80 83       	st	Z, r24
     520:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <i2>
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <i2>
     52a:	88 30       	cpi	r24, 0x08	; 8
     52c:	f8 f2       	brcs	.-66     	; 0x4ec <BuildTick2+0x70>
     52e:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <j2>
     532:	8f 5f       	subi	r24, 0xFF	; 255
     534:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <j2>
     538:	89 30       	cpi	r24, 0x09	; 9
     53a:	a8 f2       	brcs	.-86     	; 0x4e6 <BuildTick2+0x6a>
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	08 95       	ret
     542:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <yLoc2>
     546:	61 11       	cpse	r22, r1
     548:	0a c0       	rjmp	.+20     	; 0x55e <BuildTick2+0xe2>
     54a:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <xLoc2>
     54e:	60 e4       	ldi	r22, 0x40	; 64
     550:	80 58       	subi	r24, 0x80	; 128
     552:	c3 de       	rcall	.-634    	; 0x2da <lcd_setXY>
     554:	68 e0       	ldi	r22, 0x08	; 8
     556:	80 e1       	ldi	r24, 0x10	; 16
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	75 df       	rcall	.-278    	; 0x446 <N5110_image>
     55c:	22 c0       	rjmp	.+68     	; 0x5a2 <BuildTick2+0x126>
     55e:	60 5c       	subi	r22, 0xC0	; 192
     560:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <xLoc2>
     564:	80 58       	subi	r24, 0x80	; 128
     566:	b9 de       	rcall	.-654    	; 0x2da <lcd_setXY>
     568:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <segLoc2>
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	ee 0f       	add	r30, r30
     570:	ff 1f       	adc	r31, r31
     572:	e2 58       	subi	r30, 0x82	; 130
     574:	fe 4f       	sbci	r31, 0xFE	; 254
     576:	68 e0       	ldi	r22, 0x08	; 8
     578:	80 81       	ld	r24, Z
     57a:	91 81       	ldd	r25, Z+1	; 0x01
     57c:	64 df       	rcall	.-312    	; 0x446 <N5110_image>
     57e:	60 91 02 05 	lds	r22, 0x0502	; 0x800502 <yLoc2>
     582:	61 5c       	subi	r22, 0xC1	; 193
     584:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <xLoc2>
     588:	80 58       	subi	r24, 0x80	; 128
     58a:	a7 de       	rcall	.-690    	; 0x2da <lcd_setXY>
     58c:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <segLoc2>
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ee 0f       	add	r30, r30
     594:	ff 1f       	adc	r31, r31
     596:	e0 57       	subi	r30, 0x70	; 112
     598:	fe 4f       	sbci	r31, 0xFE	; 254
     59a:	68 e0       	ldi	r22, 0x08	; 8
     59c:	80 81       	ld	r24, Z
     59e:	91 81       	ldd	r25, Z+1	; 0x01
     5a0:	52 df       	rcall	.-348    	; 0x446 <N5110_image>
     5a2:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <segLoc2>
     5a6:	88 30       	cpi	r24, 0x08	; 8
     5a8:	51 f4       	brne	.+20     	; 0x5be <BuildTick2+0x142>
     5aa:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <segLoc2>
     5ae:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <yLoc2>
     5b2:	81 50       	subi	r24, 0x01	; 1
     5b4:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <yLoc2>
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	08 95       	ret
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	08 95       	ret

000005c4 <ProjTick2>:
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	91 05       	cpc	r25, r1
     5c8:	59 f0       	breq	.+22     	; 0x5e0 <ProjTick2+0x1c>
     5ca:	24 f4       	brge	.+8      	; 0x5d4 <ProjTick2+0x10>
     5cc:	89 2b       	or	r24, r25
     5ce:	09 f4       	brne	.+2      	; 0x5d2 <ProjTick2+0xe>
     5d0:	77 c0       	rjmp	.+238    	; 0x6c0 <ProjTick2+0xfc>
     5d2:	40 c0       	rjmp	.+128    	; 0x654 <ProjTick2+0x90>
     5d4:	82 30       	cpi	r24, 0x02	; 2
     5d6:	91 05       	cpc	r25, r1
     5d8:	a1 f1       	breq	.+104    	; 0x642 <ProjTick2+0x7e>
     5da:	03 97       	sbiw	r24, 0x03	; 3
     5dc:	49 f1       	breq	.+82     	; 0x630 <ProjTick2+0x6c>
     5de:	3a c0       	rjmp	.+116    	; 0x654 <ProjTick2+0x90>
     5e0:	20 91 ef 04 	lds	r18, 0x04EF	; 0x8004ef <shoot>
     5e4:	22 23       	and	r18, r18
     5e6:	09 f4       	brne	.+2      	; 0x5ea <ProjTick2+0x26>
     5e8:	9d c0       	rjmp	.+314    	; 0x724 <ProjTick2+0x160>
     5ea:	20 91 f5 04 	lds	r18, 0x04F5	; 0x8004f5 <lastDir2>
     5ee:	22 30       	cpi	r18, 0x02	; 2
     5f0:	71 f4       	brne	.+28     	; 0x60e <ProjTick2+0x4a>
     5f2:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <xLoc2>
     5f6:	88 5f       	subi	r24, 0xF8	; 248
     5f8:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <ProjX2>
     5fc:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <segLoc2>
     600:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <ProjSeg2>
     604:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <yLoc2>
     608:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <ProjY2>
     60c:	62 c0       	rjmp	.+196    	; 0x6d2 <ProjTick2+0x10e>
     60e:	23 30       	cpi	r18, 0x03	; 3
     610:	09 f0       	breq	.+2      	; 0x614 <ProjTick2+0x50>
     612:	88 c0       	rjmp	.+272    	; 0x724 <ProjTick2+0x160>
     614:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <xLoc2>
     618:	81 50       	subi	r24, 0x01	; 1
     61a:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <ProjX2>
     61e:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <segLoc2>
     622:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <ProjSeg2>
     626:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <yLoc2>
     62a:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <ProjY2>
     62e:	73 c0       	rjmp	.+230    	; 0x716 <ProjTick2+0x152>
     630:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <ProjX2>
     634:	84 35       	cpi	r24, 0x54	; 84
     636:	08 f0       	brcs	.+2      	; 0x63a <ProjTick2+0x76>
     638:	46 c0       	rjmp	.+140    	; 0x6c6 <ProjTick2+0x102>
     63a:	8f 5f       	subi	r24, 0xFF	; 255
     63c:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <ProjX2>
     640:	48 c0       	rjmp	.+144    	; 0x6d2 <ProjTick2+0x10e>
     642:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <ProjX2>
     646:	88 23       	and	r24, r24
     648:	09 f4       	brne	.+2      	; 0x64c <ProjTick2+0x88>
     64a:	40 c0       	rjmp	.+128    	; 0x6cc <ProjTick2+0x108>
     64c:	81 50       	subi	r24, 0x01	; 1
     64e:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <ProjX2>
     652:	61 c0       	rjmp	.+194    	; 0x716 <ProjTick2+0x152>
     654:	84 e5       	ldi	r24, 0x54	; 84
     656:	80 93 08 05 	sts	0x0508, r24	; 0x800508 <ProjX2>
     65a:	86 e0       	ldi	r24, 0x06	; 6
     65c:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <ProjY2>
     660:	88 e0       	ldi	r24, 0x08	; 8
     662:	80 93 0b 05 	sts	0x050B, r24	; 0x80050b <ProjSeg2>
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	08 95       	ret
     66c:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <ProjY2>
     670:	60 5c       	subi	r22, 0xC0	; 192
     672:	81 e8       	ldi	r24, 0x81	; 129
     674:	32 de       	rcall	.-924    	; 0x2da <lcd_setXY>
     676:	61 e0       	ldi	r22, 0x01	; 1
     678:	84 e6       	ldi	r24, 0x64	; 100
     67a:	94 e0       	ldi	r25, 0x04	; 4
     67c:	e4 de       	rcall	.-568    	; 0x446 <N5110_image>
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	08 95       	ret
     684:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <ProjY2>
     688:	60 5c       	subi	r22, 0xC0	; 192
     68a:	8f 57       	subi	r24, 0x7F	; 127
     68c:	26 de       	rcall	.-948    	; 0x2da <lcd_setXY>
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	84 e6       	ldi	r24, 0x64	; 100
     692:	94 e0       	ldi	r25, 0x04	; 4
     694:	d8 de       	rcall	.-592    	; 0x446 <N5110_image>
     696:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <ProjY2>
     69a:	60 5c       	subi	r22, 0xC0	; 192
     69c:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <ProjX2>
     6a0:	80 58       	subi	r24, 0x80	; 128
     6a2:	1b de       	rcall	.-970    	; 0x2da <lcd_setXY>
     6a4:	e0 91 0b 05 	lds	r30, 0x050B	; 0x80050b <ProjSeg2>
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	e2 59       	subi	r30, 0x92	; 146
     6b0:	fe 4f       	sbci	r31, 0xFE	; 254
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	80 81       	ld	r24, Z
     6b6:	91 81       	ldd	r25, Z+1	; 0x01
     6b8:	c6 de       	rcall	.-628    	; 0x446 <N5110_image>
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	08 95       	ret
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	08 95       	ret
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	08 95       	ret
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	08 95       	ret
     6d2:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <shoot>
     6d6:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <ProjY2>
     6da:	60 5c       	subi	r22, 0xC0	; 192
     6dc:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <ProjX2>
     6e0:	81 58       	subi	r24, 0x81	; 129
     6e2:	fb dd       	rcall	.-1034   	; 0x2da <lcd_setXY>
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	84 e6       	ldi	r24, 0x64	; 100
     6e8:	94 e0       	ldi	r25, 0x04	; 4
     6ea:	ad de       	rcall	.-678    	; 0x446 <N5110_image>
     6ec:	60 91 09 05 	lds	r22, 0x0509	; 0x800509 <ProjY2>
     6f0:	60 5c       	subi	r22, 0xC0	; 192
     6f2:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <ProjX2>
     6f6:	80 58       	subi	r24, 0x80	; 128
     6f8:	f0 dd       	rcall	.-1056   	; 0x2da <lcd_setXY>
     6fa:	e0 91 0b 05 	lds	r30, 0x050B	; 0x80050b <ProjSeg2>
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	ee 0f       	add	r30, r30
     702:	ff 1f       	adc	r31, r31
     704:	e2 59       	subi	r30, 0x92	; 146
     706:	fe 4f       	sbci	r31, 0xFE	; 254
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	80 81       	ld	r24, Z
     70c:	91 81       	ldd	r25, Z+1	; 0x01
     70e:	9b de       	rcall	.-714    	; 0x446 <N5110_image>
     710:	83 e0       	ldi	r24, 0x03	; 3
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	08 95       	ret
     716:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <shoot>
     71a:	80 91 08 05 	lds	r24, 0x0508	; 0x800508 <ProjX2>
     71e:	81 11       	cpse	r24, r1
     720:	b1 cf       	rjmp	.-158    	; 0x684 <ProjTick2+0xc0>
     722:	a4 cf       	rjmp	.-184    	; 0x66c <ProjTick2+0xa8>
     724:	08 95       	ret

00000726 <BuildTick>:
     726:	02 97       	sbiw	r24, 0x02	; 2
     728:	08 f4       	brcc	.+2      	; 0x72c <BuildTick+0x6>
     72a:	60 c0       	rjmp	.+192    	; 0x7ec <BuildTick+0xc6>
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <j>
     732:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <i>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <j>
     73c:	e2 2f       	mov	r30, r18
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	e6 5b       	subi	r30, 0xB6	; 182
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	01 90       	ld	r0, Z+
     74c:	f0 81       	ld	r31, Z
     74e:	e0 2d       	mov	r30, r0
     750:	e8 0f       	add	r30, r24
     752:	f9 1f       	adc	r31, r25
     754:	dc 01       	movw	r26, r24
     756:	a0 50       	subi	r26, 0x00	; 0
     758:	bf 4f       	sbci	r27, 0xFF	; 255
     75a:	8c 91       	ld	r24, X
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	02 c0       	rjmp	.+4      	; 0x764 <BuildTick+0x3e>
     760:	95 95       	asr	r25
     762:	87 95       	ror	r24
     764:	2a 95       	dec	r18
     766:	e2 f7       	brpl	.-8      	; 0x760 <BuildTick+0x3a>
     768:	80 83       	st	Z, r24
     76a:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <i>
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <i>
     774:	88 30       	cpi	r24, 0x08	; 8
     776:	00 f3       	brcs	.-64     	; 0x738 <BuildTick+0x12>
     778:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <j>
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <j>
     782:	89 30       	cpi	r24, 0x09	; 9
     784:	b0 f2       	brcs	.-84     	; 0x732 <BuildTick+0xc>
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <j>
     78c:	48 e0       	ldi	r20, 0x08	; 8
     78e:	50 e0       	ldi	r21, 0x00	; 0
     790:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <i>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	20 91 db 03 	lds	r18, 0x03DB	; 0x8003db <j>
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	f9 01       	movw	r30, r18
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	e4 5a       	subi	r30, 0xA4	; 164
     7a4:	fe 4f       	sbci	r31, 0xFE	; 254
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	01 90       	ld	r0, Z+
     7aa:	f0 81       	ld	r31, Z
     7ac:	e0 2d       	mov	r30, r0
     7ae:	e8 0f       	add	r30, r24
     7b0:	f9 1f       	adc	r31, r25
     7b2:	dc 01       	movw	r26, r24
     7b4:	a0 50       	subi	r26, 0x00	; 0
     7b6:	bf 4f       	sbci	r27, 0xFF	; 255
     7b8:	8c 91       	ld	r24, X
     7ba:	ba 01       	movw	r22, r20
     7bc:	62 1b       	sub	r22, r18
     7be:	73 0b       	sbc	r23, r19
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <BuildTick+0x9e>
     7c2:	88 0f       	add	r24, r24
     7c4:	6a 95       	dec	r22
     7c6:	ea f7       	brpl	.-6      	; 0x7c2 <BuildTick+0x9c>
     7c8:	80 83       	st	Z, r24
     7ca:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <i>
     7ce:	8f 5f       	subi	r24, 0xFF	; 255
     7d0:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <i>
     7d4:	88 30       	cpi	r24, 0x08	; 8
     7d6:	f8 f2       	brcs	.-66     	; 0x796 <BuildTick+0x70>
     7d8:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <j>
     7dc:	8f 5f       	subi	r24, 0xFF	; 255
     7de:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <j>
     7e2:	89 30       	cpi	r24, 0x09	; 9
     7e4:	a8 f2       	brcs	.-86     	; 0x790 <BuildTick+0x6a>
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	08 95       	ret
     7ec:	60 91 f7 04 	lds	r22, 0x04F7	; 0x8004f7 <yLoc>
     7f0:	61 11       	cpse	r22, r1
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <BuildTick+0xe2>
     7f4:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <xLoc>
     7f8:	60 e4       	ldi	r22, 0x40	; 64
     7fa:	80 58       	subi	r24, 0x80	; 128
     7fc:	6e dd       	rcall	.-1316   	; 0x2da <lcd_setXY>
     7fe:	68 e0       	ldi	r22, 0x08	; 8
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	20 de       	rcall	.-960    	; 0x446 <N5110_image>
     806:	22 c0       	rjmp	.+68     	; 0x84c <BuildTick+0x126>
     808:	60 5c       	subi	r22, 0xC0	; 192
     80a:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <xLoc>
     80e:	80 58       	subi	r24, 0x80	; 128
     810:	64 dd       	rcall	.-1336   	; 0x2da <lcd_setXY>
     812:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <segLoc>
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	ee 0f       	add	r30, r30
     81a:	ff 1f       	adc	r31, r31
     81c:	e6 5b       	subi	r30, 0xB6	; 182
     81e:	fe 4f       	sbci	r31, 0xFE	; 254
     820:	68 e0       	ldi	r22, 0x08	; 8
     822:	80 81       	ld	r24, Z
     824:	91 81       	ldd	r25, Z+1	; 0x01
     826:	0f de       	rcall	.-994    	; 0x446 <N5110_image>
     828:	60 91 f7 04 	lds	r22, 0x04F7	; 0x8004f7 <yLoc>
     82c:	61 5c       	subi	r22, 0xC1	; 193
     82e:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <xLoc>
     832:	80 58       	subi	r24, 0x80	; 128
     834:	52 dd       	rcall	.-1372   	; 0x2da <lcd_setXY>
     836:	e0 91 0a 05 	lds	r30, 0x050A	; 0x80050a <segLoc>
     83a:	f0 e0       	ldi	r31, 0x00	; 0
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	e4 5a       	subi	r30, 0xA4	; 164
     842:	fe 4f       	sbci	r31, 0xFE	; 254
     844:	68 e0       	ldi	r22, 0x08	; 8
     846:	80 81       	ld	r24, Z
     848:	91 81       	ldd	r25, Z+1	; 0x01
     84a:	fd dd       	rcall	.-1030   	; 0x446 <N5110_image>
     84c:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <segLoc>
     850:	88 30       	cpi	r24, 0x08	; 8
     852:	51 f4       	brne	.+20     	; 0x868 <BuildTick+0x142>
     854:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <segLoc>
     858:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <yLoc>
     85c:	81 50       	subi	r24, 0x01	; 1
     85e:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <yLoc>
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	08 95       	ret
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	08 95       	ret

0000086e <initUSART>:
     86e:	81 30       	cpi	r24, 0x01	; 1
     870:	81 f0       	breq	.+32     	; 0x892 <initUSART+0x24>
     872:	e1 ec       	ldi	r30, 0xC1	; 193
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	88 61       	ori	r24, 0x18	; 24
     87a:	80 83       	st	Z, r24
     87c:	e2 ec       	ldi	r30, 0xC2	; 194
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	86 60       	ori	r24, 0x06	; 6
     884:	80 83       	st	Z, r24
     886:	83 e3       	ldi	r24, 0x33	; 51
     888:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     88c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     890:	08 95       	ret
     892:	e9 ec       	ldi	r30, 0xC9	; 201
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	88 61       	ori	r24, 0x18	; 24
     89a:	80 83       	st	Z, r24
     89c:	ea ec       	ldi	r30, 0xCA	; 202
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	80 81       	ld	r24, Z
     8a2:	86 60       	ori	r24, 0x06	; 6
     8a4:	80 83       	st	Z, r24
     8a6:	83 e3       	ldi	r24, 0x33	; 51
     8a8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     8ac:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     8b0:	08 95       	ret

000008b2 <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
     8b2:	81 30       	cpi	r24, 0x01	; 1
     8b4:	29 f4       	brne	.+10     	; 0x8c0 <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
     8b6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     8ba:	88 23       	and	r24, r24
     8bc:	74 f0       	brlt	.+28     	; 0x8da <USART_Flush+0x28>
     8be:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
     8c0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     8c4:	88 23       	and	r24, r24
     8c6:	8c f4       	brge	.+34     	; 0x8ea <USART_Flush+0x38>
     8c8:	a6 ec       	ldi	r26, 0xC6	; 198
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	e0 ec       	ldi	r30, 0xC0	; 192
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	8c 91       	ld	r24, X
     8d2:	80 81       	ld	r24, Z
     8d4:	88 23       	and	r24, r24
     8d6:	e4 f3       	brlt	.-8      	; 0x8d0 <USART_Flush+0x1e>
     8d8:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
     8da:	ae ec       	ldi	r26, 0xCE	; 206
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e8 ec       	ldi	r30, 0xC8	; 200
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	8c 91       	ld	r24, X
     8e4:	80 81       	ld	r24, Z
     8e6:	88 23       	and	r24, r24
     8e8:	e4 f3       	brlt	.-8      	; 0x8e2 <USART_Flush+0x30>
     8ea:	08 95       	ret

000008ec <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
     8ec:	61 30       	cpi	r22, 0x01	; 1
     8ee:	41 f0       	breq	.+16     	; 0x900 <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
     8f0:	e0 ec       	ldi	r30, 0xC0	; 192
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	90 81       	ld	r25, Z
     8f6:	95 ff       	sbrs	r25, 5
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <USART_Send+0x8>
		UDR0 = sendMe;
     8fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     8fe:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
     900:	e8 ec       	ldi	r30, 0xC8	; 200
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	90 81       	ld	r25, Z
     906:	95 ff       	sbrs	r25, 5
     908:	fd cf       	rjmp	.-6      	; 0x904 <USART_Send+0x18>
		UDR1 = sendMe;
     90a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     90e:	08 95       	ret

00000910 <LocTick>:
	//ADC x > 900 => JOYStick down => 0
	//ADC x < 200 => JOYStick up => 1
	//ADC y > 900 => JOYStick right => 2
	//ADC y < 200 => JOYStick left => 3
int LocTick(int state){
	switch(state){//Transitions
     910:	02 97       	sbiw	r24, 0x02	; 2
     912:	b0 f0       	brcs	.+44     	; 0x940 <LocTick+0x30>
			state = LocStart;
			break;
	}
	switch(state){//Actions
		case LocStart:
			segLoc = 0;
     914:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <segLoc>
			yLoc = 2;
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <yLoc>
			xLoc = 75;
     91e:	8b e4       	ldi	r24, 0x4B	; 75
     920:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <xLoc>
			y = 0;
     924:	10 92 07 05 	sts	0x0507, r1	; 0x800507 <y+0x1>
     928:	10 92 06 05 	sts	0x0506, r1	; 0x800506 <y>
			x = 0;
     92c:	10 92 fa 04 	sts	0x04FA, r1	; 0x8004fa <x+0x1>
     930:	10 92 f9 04 	sts	0x04F9, r1	; 0x8004f9 <x>
			lastDir = 3;
     934:	83 e0       	ldi	r24, 0x03	; 3
     936:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <lastDir>
			break;
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	08 95       	ret
		case LocUpdate:
			x = analog_read(0);
     940:	80 e0       	ldi	r24, 0x00	; 0
     942:	cb db       	rcall	.-2154   	; 0xda <analog_read>
     944:	90 93 fa 04 	sts	0x04FA, r25	; 0x8004fa <x+0x1>
     948:	80 93 f9 04 	sts	0x04F9, r24	; 0x8004f9 <x>
			y = analog_read(1);
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	c5 db       	rcall	.-2166   	; 0xda <analog_read>
     950:	90 93 07 05 	sts	0x0507, r25	; 0x800507 <y+0x1>
     954:	80 93 06 05 	sts	0x0506, r24	; 0x800506 <y>
			//y direction
			if (x > 900)
     958:	20 91 f9 04 	lds	r18, 0x04F9	; 0x8004f9 <x>
     95c:	30 91 fa 04 	lds	r19, 0x04FA	; 0x8004fa <x+0x1>
     960:	25 38       	cpi	r18, 0x85	; 133
     962:	43 e0       	ldi	r20, 0x03	; 3
     964:	34 07       	cpc	r19, r20
     966:	e0 f0       	brcs	.+56     	; 0x9a0 <LocTick+0x90>
			{
				data = 'd';
     968:	84 e6       	ldi	r24, 0x64	; 100
     96a:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <data>
				USART_Send(data, 0);
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	bd df       	rcall	.-134    	; 0x8ec <USART_Send>
				if(segLoc == 0 && yLoc != 5){
     972:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <segLoc>
     976:	81 11       	cpse	r24, r1
     978:	0b c0       	rjmp	.+22     	; 0x990 <LocTick+0x80>
     97a:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <yLoc>
     97e:	85 30       	cpi	r24, 0x05	; 5
     980:	51 f0       	breq	.+20     	; 0x996 <LocTick+0x86>
					segLoc = 7;
     982:	97 e0       	ldi	r25, 0x07	; 7
     984:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <segLoc>
					yLoc ++;
     988:	8f 5f       	subi	r24, 0xFF	; 255
     98a:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <yLoc>
     98e:	03 c0       	rjmp	.+6      	; 0x996 <LocTick+0x86>
					}else if(segLoc != 0){
					segLoc --;
     990:	81 50       	subi	r24, 0x01	; 1
     992:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <segLoc>
				}
				lastDir = 0;
     996:	10 92 fb 04 	sts	0x04FB, r1	; 0x8004fb <lastDir>
	//ADC y > 900 => JOYStick right => 2
	//ADC y < 200 => JOYStick left => 3
int LocTick(int state){
	switch(state){//Transitions
		case LocStart:
			state = LocUpdate;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	08 95       	ret
					yLoc ++;
					}else if(segLoc != 0){
					segLoc --;
				}
				lastDir = 0;
			}else if (x < 200)
     9a0:	28 3c       	cpi	r18, 0xC8	; 200
     9a2:	31 05       	cpc	r19, r1
     9a4:	20 f5       	brcc	.+72     	; 0x9ee <LocTick+0xde>
			{
				data = 'u';
     9a6:	85 e7       	ldi	r24, 0x75	; 117
     9a8:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <data>
				USART_Send(data, 0);
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	9e df       	rcall	.-196    	; 0x8ec <USART_Send>
				if (segLoc == 8)
     9b0:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <segLoc>
     9b4:	88 30       	cpi	r24, 0x08	; 8
     9b6:	41 f4       	brne	.+16     	; 0x9c8 <LocTick+0xb8>
				{
					segLoc = 0;
     9b8:	10 92 0a 05 	sts	0x050A, r1	; 0x80050a <segLoc>
					yLoc -- ;
     9bc:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <yLoc>
     9c0:	81 50       	subi	r24, 0x01	; 1
     9c2:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <yLoc>
     9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <LocTick+0xd2>
					}else if(segLoc == 0 && yLoc != 0){
     9c8:	81 11       	cpse	r24, r1
     9ca:	08 c0       	rjmp	.+16     	; 0x9dc <LocTick+0xcc>
     9cc:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <yLoc>
     9d0:	88 23       	and	r24, r24
     9d2:	39 f0       	breq	.+14     	; 0x9e2 <LocTick+0xd2>
					segLoc ++;
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <segLoc>
     9da:	03 c0       	rjmp	.+6      	; 0x9e2 <LocTick+0xd2>
				}else if (segLoc > 0)
				{
					segLoc ++;
     9dc:	8f 5f       	subi	r24, 0xFF	; 255
     9de:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <segLoc>
				}
				lastDir = 1;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <lastDir>
	//ADC y > 900 => JOYStick right => 2
	//ADC y < 200 => JOYStick left => 3
int LocTick(int state){
	switch(state){//Transitions
		case LocStart:
			state = LocUpdate;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	08 95       	ret
				}
				lastDir = 1;
			}
			
			//x direction
			else if (y < 200 && xLoc > 0)
     9ee:	88 3c       	cpi	r24, 0xC8	; 200
     9f0:	91 05       	cpc	r25, r1
     9f2:	a0 f4       	brcc	.+40     	; 0xa1c <LocTick+0x10c>
     9f4:	20 91 03 05 	lds	r18, 0x0503	; 0x800503 <xLoc>
     9f8:	22 23       	and	r18, r18
     9fa:	79 f1       	breq	.+94     	; 0xa5a <LocTick+0x14a>
			{
				data = 'r';
     9fc:	82 e7       	ldi	r24, 0x72	; 114
     9fe:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <data>
				USART_Send(data, 0);
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	73 df       	rcall	.-282    	; 0x8ec <USART_Send>
				xLoc ++;
     a06:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <xLoc>
     a0a:	8f 5f       	subi	r24, 0xFF	; 255
     a0c:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <xLoc>
				lastDir = 2;
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <lastDir>
	//ADC y > 900 => JOYStick right => 2
	//ADC y < 200 => JOYStick left => 3
int LocTick(int state){
	switch(state){//Transitions
		case LocStart:
			state = LocUpdate;
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
			else if (y < 200 && xLoc > 0)
			{
				data = 'r';
				USART_Send(data, 0);
				xLoc ++;
				lastDir = 2;
     a1a:	08 95       	ret
			}else if ( y > 900 && xLoc < 76)
     a1c:	85 38       	cpi	r24, 0x85	; 133
     a1e:	93 40       	sbci	r25, 0x03	; 3
     a20:	a0 f0       	brcs	.+40     	; 0xa4a <LocTick+0x13a>
     a22:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <xLoc>
     a26:	8c 34       	cpi	r24, 0x4C	; 76
			{
				data = 'l';
     a28:	80 f4       	brcc	.+32     	; 0xa4a <LocTick+0x13a>
     a2a:	8c e6       	ldi	r24, 0x6C	; 108
     a2c:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <data>
				USART_Send(data, 0);
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	5c df       	rcall	.-328    	; 0x8ec <USART_Send>
				xLoc --;
     a34:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <xLoc>
     a38:	81 50       	subi	r24, 0x01	; 1
     a3a:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <xLoc>
				lastDir = 3;
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	80 93 fb 04 	sts	0x04FB, r24	; 0x8004fb <lastDir>
	//ADC y > 900 => JOYStick right => 2
	//ADC y < 200 => JOYStick left => 3
int LocTick(int state){
	switch(state){//Transitions
		case LocStart:
			state = LocUpdate;
     a44:	81 e0       	ldi	r24, 0x01	; 1
			}else if ( y > 900 && xLoc < 76)
			{
				data = 'l';
				USART_Send(data, 0);
				xLoc --;
				lastDir = 3;
     a46:	90 e0       	ldi	r25, 0x00	; 0
			}
			else{
				data = 'n';
     a48:	08 95       	ret
     a4a:	8e e6       	ldi	r24, 0x6E	; 110
     a4c:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <data>
				USART_Send(data, 0);
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	4c df       	rcall	.-360    	; 0x8ec <USART_Send>
	//ADC y > 900 => JOYStick right => 2
	//ADC y < 200 => JOYStick left => 3
int LocTick(int state){
	switch(state){//Transitions
		case LocStart:
			state = LocUpdate;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
		default:
			break;
	}
	return state;
     a58:	08 95       	ret
			{
				data = 'r';
				USART_Send(data, 0);
				xLoc ++;
				lastDir = 2;
			}else if ( y > 900 && xLoc < 76)
     a5a:	85 38       	cpi	r24, 0x85	; 133
     a5c:	93 40       	sbci	r25, 0x03	; 3
     a5e:	a8 f3       	brcs	.-22     	; 0xa4a <LocTick+0x13a>
     a60:	e4 cf       	rjmp	.-56     	; 0xa2a <LocTick+0x11a>

00000a62 <ProjTick>:

char ProjX;
unsigned char ProjY;
unsigned char ProjSeg;
int ProjTick(int state){
	switch(state){//Transitions
     a62:	81 30       	cpi	r24, 0x01	; 1
     a64:	91 05       	cpc	r25, r1
     a66:	59 f0       	breq	.+22     	; 0xa7e <ProjTick+0x1c>
     a68:	24 f4       	brge	.+8      	; 0xa72 <ProjTick+0x10>
     a6a:	89 2b       	or	r24, r25
     a6c:	09 f4       	brne	.+2      	; 0xa70 <ProjTick+0xe>
     a6e:	7e c0       	rjmp	.+252    	; 0xb6c <ProjTick+0x10a>
     a70:	47 c0       	rjmp	.+142    	; 0xb00 <ProjTick+0x9e>
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	91 05       	cpc	r25, r1
     a76:	d9 f1       	breq	.+118    	; 0xaee <ProjTick+0x8c>
     a78:	03 97       	sbiw	r24, 0x03	; 3
     a7a:	81 f1       	breq	.+96     	; 0xadc <ProjTick+0x7a>
     a7c:	41 c0       	rjmp	.+130    	; 0xb00 <ProjTick+0x9e>
		case ProjStart:
			state = ProjWait;
			break;
		case ProjWait:
			if (!GetBit(PINC, 0) && lastDir == 2){
     a7e:	30 99       	sbic	0x06, 0	; 6
     a80:	15 c0       	rjmp	.+42     	; 0xaac <ProjTick+0x4a>
     a82:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <lastDir>
     a86:	22 30       	cpi	r18, 0x02	; 2
     a88:	89 f4       	brne	.+34     	; 0xaac <ProjTick+0x4a>
				USART_Send('s', 0);
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	83 e7       	ldi	r24, 0x73	; 115
     a8e:	2e df       	rcall	.-420    	; 0x8ec <USART_Send>
				ProjX = xLoc + 8;
     a90:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <xLoc>
     a94:	88 5f       	subi	r24, 0xF8	; 248
     a96:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <ProjX>
				ProjSeg = segLoc; //+ 5;
     a9a:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <segLoc>
     a9e:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <ProjSeg>
				ProjY = yLoc;
     aa2:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <yLoc>
     aa6:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <ProjY>
				/*if (ProjSeg > 7)
				{
					ProjSeg -= 7;
					ProjY --;
				}*/
				state = ProjRight;
     aaa:	69 c0       	rjmp	.+210    	; 0xb7e <ProjTick+0x11c>
			}
			else if (!GetBit(PINC, 0) && lastDir == 3){
     aac:	30 99       	sbic	0x06, 0	; 6
     aae:	8c c0       	rjmp	.+280    	; 0xbc8 <ProjTick+0x166>
     ab0:	20 91 fb 04 	lds	r18, 0x04FB	; 0x8004fb <lastDir>
     ab4:	23 30       	cpi	r18, 0x03	; 3
     ab6:	09 f0       	breq	.+2      	; 0xaba <ProjTick+0x58>
     ab8:	87 c0       	rjmp	.+270    	; 0xbc8 <ProjTick+0x166>
				USART_Send('s', 0);
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	83 e7       	ldi	r24, 0x73	; 115
     abe:	16 df       	rcall	.-468    	; 0x8ec <USART_Send>
				ProjX = xLoc - 1;
     ac0:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <xLoc>
     ac4:	81 50       	subi	r24, 0x01	; 1
     ac6:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <ProjX>
				ProjSeg = segLoc; //+ 5;
     aca:	80 91 0a 05 	lds	r24, 0x050A	; 0x80050a <segLoc>
     ace:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <ProjSeg>
				ProjY = yLoc;
     ad2:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <yLoc>
     ad6:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <ProjY>
				/*if (ProjSeg > 7)
				{
					ProjSeg -= 7;
					ProjY --;
				}*/
				state = ProjLeft;
     ada:	71 c0       	rjmp	.+226    	; 0xbbe <ProjTick+0x15c>
			}else{
				state = ProjWait;
			}
			break;
		case ProjRight:
			if(ProjX > 83){
     adc:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <ProjX>
     ae0:	84 35       	cpi	r24, 0x54	; 84
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <ProjTick+0x84>
     ae4:	46 c0       	rjmp	.+140    	; 0xb72 <ProjTick+0x110>
				state = ProjWait;
			}else{
				state = ProjRight;
				ProjX ++;
     ae6:	8f 5f       	subi	r24, 0xFF	; 255
     ae8:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <ProjX>
     aec:	48 c0       	rjmp	.+144    	; 0xb7e <ProjTick+0x11c>
			}
			break;
		case ProjLeft:
			if (ProjX == 0)
     aee:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <ProjX>
     af2:	88 23       	and	r24, r24
     af4:	09 f4       	brne	.+2      	; 0xaf8 <ProjTick+0x96>
     af6:	40 c0       	rjmp	.+128    	; 0xb78 <ProjTick+0x116>
			{
				state = ProjWait;
			}
			else {
				state = ProjLeft;
				ProjX --;
     af8:	81 50       	subi	r24, 0x01	; 1
     afa:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <ProjX>
     afe:	5f c0       	rjmp	.+190    	; 0xbbe <ProjTick+0x15c>
			state = ProjStart;
			break;
	}
	switch(state){//Actions
		case ProjStart:
			ProjX = 84;
     b00:	84 e5       	ldi	r24, 0x54	; 84
     b02:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <ProjX>
			ProjY = 6;
     b06:	86 e0       	ldi	r24, 0x06	; 6
     b08:	80 93 fd 04 	sts	0x04FD, r24	; 0x8004fd <ProjY>
			ProjSeg = 8;
     b0c:	88 e0       	ldi	r24, 0x08	; 8
     b0e:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <ProjSeg>
			break;
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	08 95       	ret
			N5110_image(projectile[ProjSeg], 1);
			break;
		case ProjLeft:
			if (ProjX == 0)
			{
				lcd_setXY(0x80 + 1, 0x40 + ProjY);
     b18:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <ProjY>
     b1c:	60 5c       	subi	r22, 0xC0	; 192
     b1e:	81 e8       	ldi	r24, 0x81	; 129
     b20:	dc db       	rcall	.-2120   	; 0x2da <lcd_setXY>
				N5110_image(erase, 1);
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	84 e6       	ldi	r24, 0x64	; 100
     b26:	94 e0       	ldi	r25, 0x04	; 4
     b28:	8e dc       	rcall	.-1764   	; 0x446 <N5110_image>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	08 95       	ret
			}else {
				lcd_setXY(0x80 + ProjX  +1, 0x40 + ProjY);
     b30:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <ProjY>
     b34:	60 5c       	subi	r22, 0xC0	; 192
     b36:	8f 57       	subi	r24, 0x7F	; 127
				N5110_image(erase, 1);
     b38:	d0 db       	rcall	.-2144   	; 0x2da <lcd_setXY>
     b3a:	61 e0       	ldi	r22, 0x01	; 1
     b3c:	84 e6       	ldi	r24, 0x64	; 100
     b3e:	94 e0       	ldi	r25, 0x04	; 4
     b40:	82 dc       	rcall	.-1788   	; 0x446 <N5110_image>
				lcd_setXY(0x80 + ProjX , 0x40 + ProjY);
     b42:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <ProjY>
     b46:	60 5c       	subi	r22, 0xC0	; 192
     b48:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <ProjX>
     b4c:	80 58       	subi	r24, 0x80	; 128
     b4e:	c5 db       	rcall	.-2166   	; 0x2da <lcd_setXY>
				N5110_image(projectile[ProjSeg], 1);
     b50:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <ProjSeg>
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	e2 59       	subi	r30, 0x92	; 146
     b5c:	fe 4f       	sbci	r31, 0xFE	; 254
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	80 81       	ld	r24, Z
     b62:	91 81       	ldd	r25, Z+1	; 0x01
     b64:	70 dc       	rcall	.-1824   	; 0x446 <N5110_image>
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	08 95       	ret
unsigned char ProjY;
unsigned char ProjSeg;
int ProjTick(int state){
	switch(state){//Transitions
		case ProjStart:
			state = ProjWait;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	08 95       	ret
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	08 95       	ret
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
			ProjSeg = 8;
			break;
		case ProjWait:
			break;
		case ProjRight:
			lcd_setXY(0x80 + ProjX -1  , 0x40 + ProjY);
     b7c:	08 95       	ret
     b7e:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <ProjY>
     b82:	60 5c       	subi	r22, 0xC0	; 192
     b84:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <ProjX>
     b88:	81 58       	subi	r24, 0x81	; 129
			N5110_image(erase, 1);
     b8a:	a7 db       	rcall	.-2226   	; 0x2da <lcd_setXY>
     b8c:	61 e0       	ldi	r22, 0x01	; 1
     b8e:	84 e6       	ldi	r24, 0x64	; 100
     b90:	94 e0       	ldi	r25, 0x04	; 4
			lcd_setXY(0x80 + ProjX , 0x40 + ProjY);
     b92:	59 dc       	rcall	.-1870   	; 0x446 <N5110_image>
     b94:	60 91 fd 04 	lds	r22, 0x04FD	; 0x8004fd <ProjY>
     b98:	60 5c       	subi	r22, 0xC0	; 192
     b9a:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <ProjX>
     b9e:	80 58       	subi	r24, 0x80	; 128
			N5110_image(projectile[ProjSeg], 1);
     ba0:	9c db       	rcall	.-2248   	; 0x2da <lcd_setXY>
     ba2:	e0 91 05 05 	lds	r30, 0x0505	; 0x800505 <ProjSeg>
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	e2 59       	subi	r30, 0x92	; 146
     bae:	fe 4f       	sbci	r31, 0xFE	; 254
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	80 81       	ld	r24, Z
     bb4:	91 81       	ldd	r25, Z+1	; 0x01
     bb6:	47 dc       	rcall	.-1906   	; 0x446 <N5110_image>
			break;
     bb8:	83 e0       	ldi	r24, 0x03	; 3
     bba:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
		default:
			break;
	}
	return state;
     bbc:	08 95       	ret
			N5110_image(erase, 1);
			lcd_setXY(0x80 + ProjX , 0x40 + ProjY);
			N5110_image(projectile[ProjSeg], 1);
			break;
		case ProjLeft:
			if (ProjX == 0)
     bbe:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <ProjX>
     bc2:	81 11       	cpse	r24, r1
     bc4:	b5 cf       	rjmp	.-150    	; 0xb30 <ProjTick+0xce>
     bc6:	a8 cf       	rjmp	.-176    	; 0xb18 <ProjTick+0xb6>
			break;
		default:
			break;
	}
	return state;
}
     bc8:	08 95       	ret

00000bca <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	41 f0       	breq	.+16     	; 0xbde <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
     bce:	e0 ec       	ldi	r30, 0xC0	; 192
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	88 23       	and	r24, r24
     bd6:	ec f7       	brge	.-6      	; 0xbd2 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
     bd8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     bdc:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
     bde:	e8 ec       	ldi	r30, 0xC8	; 200
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	88 23       	and	r24, r24
     be6:	ec f7       	brge	.-6      	; 0xbe2 <USART_Receive+0x18>
		return UDR1;
     be8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
     bec:	08 95       	ret

00000bee <LocTick2>:
//ADC x > 900 => JOYStick down => 0
//ADC x < 200 => JOYStick up => 1
//ADC y > 900 => JOYStick right => 2
//ADC y < 200 => JOYStick left => 3
int LocTick2(int state){
	switch(state){//Transitions
     bee:	02 97       	sbiw	r24, 0x02	; 2
     bf0:	a0 f0       	brcs	.+40     	; 0xc1a <LocTick2+0x2c>
	}
	switch(state){//Actions
		case LocStart2:
		
		
		segLoc2 = 0;
     bf2:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <segLoc2>
		yLoc2 = 2;
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <yLoc2>
		xLoc2 = 0;
     bfc:	10 92 0c 05 	sts	0x050C, r1	; 0x80050c <xLoc2>
		y2 = 0;
     c00:	10 92 ff 04 	sts	0x04FF, r1	; 0x8004ff <y2+0x1>
     c04:	10 92 fe 04 	sts	0x04FE, r1	; 0x8004fe <y2>
		x2 = 0;
     c08:	10 92 01 05 	sts	0x0501, r1	; 0x800501 <x2+0x1>
     c0c:	10 92 00 05 	sts	0x0500, r1	; 0x800500 <x2>
		lastDir2 = 2;
     c10:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <lastDir2>
		break;
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	08 95       	ret
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     c1a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		case LocUpdate2:
		//x2 = analog_read(2);
		//y2 = analog_read(3);
		//y direction
		if (USART_HasReceived(0))
     c1e:	88 23       	and	r24, r24
     c20:	0c f0       	brlt	.+2      	; 0xc24 <LocTick2+0x36>
     c22:	64 c0       	rjmp	.+200    	; 0xcec <LocTick2+0xfe>
		{
			recv = USART_Receive(0);
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	d1 df       	rcall	.-94     	; 0xbca <USART_Receive>
     c28:	80 93 f8 04 	sts	0x04F8, r24	; 0x8004f8 <recv>
			USART_Flush(0);	
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	41 de       	rcall	.-894    	; 0x8b2 <USART_Flush>
			if (recv == 'd')
     c30:	80 91 f8 04 	lds	r24, 0x04F8	; 0x8004f8 <recv>
     c34:	84 36       	cpi	r24, 0x64	; 100
     c36:	b9 f4       	brne	.+46     	; 0xc66 <LocTick2+0x78>
			{
				if(segLoc2 == 0 && yLoc2 != 5){
     c38:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <segLoc2>
     c3c:	81 11       	cpse	r24, r1
     c3e:	0b c0       	rjmp	.+22     	; 0xc56 <LocTick2+0x68>
     c40:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <yLoc2>
     c44:	85 30       	cpi	r24, 0x05	; 5
     c46:	51 f0       	breq	.+20     	; 0xc5c <LocTick2+0x6e>
					segLoc2 = 7;
     c48:	97 e0       	ldi	r25, 0x07	; 7
     c4a:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <segLoc2>
					yLoc2 ++;
     c4e:	8f 5f       	subi	r24, 0xFF	; 255
     c50:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <yLoc2>
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <LocTick2+0x6e>
					}else if(segLoc2 != 0){
					segLoc2 --;
     c56:	81 50       	subi	r24, 0x01	; 1
     c58:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <segLoc2>
				}
				lastDir2 = 0;
     c5c:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <lastDir2>
//ADC y > 900 => JOYStick right => 2
//ADC y < 200 => JOYStick left => 3
int LocTick2(int state){
	switch(state){//Transitions
		case LocStart2:
		state = LocUpdate2;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	08 95       	ret
					yLoc2 ++;
					}else if(segLoc2 != 0){
					segLoc2 --;
				}
				lastDir2 = 0;
			}else if (recv == 'u')
     c66:	85 37       	cpi	r24, 0x75	; 117
     c68:	f9 f4       	brne	.+62     	; 0xca8 <LocTick2+0xba>
			{
				if (segLoc2 == 8)
     c6a:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <segLoc2>
     c6e:	88 30       	cpi	r24, 0x08	; 8
     c70:	41 f4       	brne	.+16     	; 0xc82 <LocTick2+0x94>
				{
					segLoc2 = 0;
     c72:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <segLoc2>
					yLoc2 -- ;
     c76:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <yLoc2>
     c7a:	81 50       	subi	r24, 0x01	; 1
     c7c:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <yLoc2>
     c80:	0d c0       	rjmp	.+26     	; 0xc9c <LocTick2+0xae>
					}else if(segLoc2 == 0 && yLoc2 != 0){
     c82:	81 11       	cpse	r24, r1
     c84:	08 c0       	rjmp	.+16     	; 0xc96 <LocTick2+0xa8>
     c86:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <yLoc2>
     c8a:	88 23       	and	r24, r24
     c8c:	39 f0       	breq	.+14     	; 0xc9c <LocTick2+0xae>
					segLoc2 ++;
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <segLoc2>
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <LocTick2+0xae>
				}else if (segLoc2 > 0)
				{
					segLoc2 ++;
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <segLoc2>
				}
				lastDir2 = 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <lastDir2>
//ADC y > 900 => JOYStick right => 2
//ADC y < 200 => JOYStick left => 3
int LocTick2(int state){
	switch(state){//Transitions
		case LocStart2:
		state = LocUpdate2;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	08 95       	ret
				}
				lastDir2 = 1;
			}
		
		//x direction
			else if (recv == 'r')
     ca8:	82 37       	cpi	r24, 0x72	; 114
     caa:	59 f4       	brne	.+22     	; 0xcc2 <LocTick2+0xd4>
			{
				xLoc2 ++;
     cac:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <xLoc2>
     cb0:	8f 5f       	subi	r24, 0xFF	; 255
     cb2:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <xLoc2>
				lastDir2 = 2;
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <lastDir2>
//ADC y > 900 => JOYStick right => 2
//ADC y < 200 => JOYStick left => 3
int LocTick2(int state){
	switch(state){//Transitions
		case LocStart2:
		state = LocUpdate2;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	08 95       	ret
		//x direction
			else if (recv == 'r')
			{
				xLoc2 ++;
				lastDir2 = 2;
			}else if (recv == 'l')
     cc2:	8c 36       	cpi	r24, 0x6C	; 108
     cc4:	59 f4       	brne	.+22     	; 0xcdc <LocTick2+0xee>
			{
				xLoc2 --;
     cc6:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <xLoc2>
     cca:	81 50       	subi	r24, 0x01	; 1
     ccc:	80 93 0c 05 	sts	0x050C, r24	; 0x80050c <xLoc2>
				lastDir2 = 3;
     cd0:	83 e0       	ldi	r24, 0x03	; 3
     cd2:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <lastDir2>
//ADC y > 900 => JOYStick right => 2
//ADC y < 200 => JOYStick left => 3
int LocTick2(int state){
	switch(state){//Transitions
		case LocStart2:
		state = LocUpdate2;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	08 95       	ret
			}else if (recv == 'l')
			{
				xLoc2 --;
				lastDir2 = 3;
			}
			else if (recv == 's')
     cdc:	83 37       	cpi	r24, 0x73	; 115
     cde:	49 f4       	brne	.+18     	; 0xcf2 <LocTick2+0x104>
			{
				shoot = 1;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <shoot>
//ADC y > 900 => JOYStick right => 2
//ADC y < 200 => JOYStick left => 3
int LocTick2(int state){
	switch(state){//Transitions
		case LocStart2:
		state = LocUpdate2;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	08 95       	ret
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	08 95       	ret
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
		break;
		default:
		break;
	}
	return state;
}
     cf6:	08 95       	ret

00000cf8 <main>:
		break;
	}
	return state;
}
int main(void)
{
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	60 97       	sbiw	r28, 0x10	; 16
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF;
     d0c:	11 b8       	out	0x01, r1	; 1
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF; PORTD = 0x00;
     d12:	8a b9       	out	0x0a, r24	; 10
     d14:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0x00; PORTC = 0xFF;
     d16:	17 b8       	out	0x07, r1	; 7
     d18:	88 b9       	out	0x08, r24	; 8
	//static unsigned char bottom[]= {0x00, 0x01, 0x03, 0xFF, 0x9F, 0x1F, 0xFF, 0x8F, 0x03, 0x00, 0x01, 0x00, 0x00};
	//static unsigned char top[] =   {0xC0, 0x80, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xFF, 0xFD, 0x97, 0x97, 0x17, 0x07};
	
	initUSART(0);
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	a8 dd       	rcall	.-1200   	; 0x86e <initUSART>
    ADC_init();
     d1e:	d4 d9       	rcall	.-3160   	; 0xc8 <ADC_init>
	SPI_Init();
     d20:	6a da       	rcall	.-2860   	; 0x1f6 <SPI_Init>
	N5110_init();
     d22:	cd da       	rcall	.-2662   	; 0x2be <N5110_init>
	N5110_clear();
     d24:	e1 da       	rcall	.-2622   	; 0x2e8 <N5110_clear>
     d26:	62 e4       	ldi	r22, 0x42	; 66
	lcd_setXY(0x9F ,0x42);
     d28:	8f e9       	ldi	r24, 0x9F	; 159
     d2a:	d7 da       	rcall	.-2642   	; 0x2da <lcd_setXY>
     d2c:	18 e2       	ldi	r17, 0x28	; 40
     d2e:	00 e0       	ldi	r16, 0x00	; 0
     d30:	b1 2c       	mov	r11, r1
     d32:	a1 2c       	mov	r10, r1
     d34:	5b e4       	ldi	r21, 0x4B	; 75
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	04 c0       	rjmp	.+8      	; 0xd46 <main+0x4e>
     d3e:	16 2f       	mov	r17, r22
     d40:	07 2f       	mov	r16, r23
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
     d42:	b8 2e       	mov	r11, r24
     d44:	a9 2e       	mov	r10, r25
     d46:	65 2f       	mov	r22, r21
     d48:	74 2f       	mov	r23, r20
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
     d4a:	83 2f       	mov	r24, r19
     d4c:	92 2f       	mov	r25, r18
     d4e:	21 2f       	mov	r18, r17
     d50:	30 2f       	mov	r19, r16
     d52:	4b 2d       	mov	r20, r11
     d54:	5a 2d       	mov	r21, r10
     d56:	7f d1       	rcall	.+766    	; 0x1056 <__udivmodsi4>
     d58:	51 2f       	mov	r21, r17
     d5a:	40 2f       	mov	r20, r16
     d5c:	3b 2d       	mov	r19, r11
     d5e:	2a 2d       	mov	r18, r10
     d60:	61 15       	cp	r22, r1
     d62:	71 05       	cpc	r23, r1
		if( c == 0 ) { return b; }
     d64:	81 05       	cpc	r24, r1
     d66:	91 05       	cpc	r25, r1
     d68:	51 f7       	brne	.-44     	; 0xd3e <main+0x46>
     d6a:	0f 2e       	mov	r0, r31
     d6c:	fb e4       	ldi	r31, 0x4B	; 75
     d6e:	ff 2e       	mov	r15, r31
     d70:	f0 2d       	mov	r31, r0
     d72:	e1 2c       	mov	r14, r1
     d74:	d1 2c       	mov	r13, r1
     d76:	c1 2c       	mov	r12, r1
     d78:	04 c0       	rjmp	.+8      	; 0xd82 <main+0x8a>
     d7a:	f6 2e       	mov	r15, r22
     d7c:	e7 2e       	mov	r14, r23
		a = b;
		b = c;
     d7e:	d8 2e       	mov	r13, r24
     d80:	c9 2e       	mov	r12, r25
     d82:	61 2f       	mov	r22, r17
     d84:	70 2f       	mov	r23, r16
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
     d86:	8b 2d       	mov	r24, r11
     d88:	9a 2d       	mov	r25, r10
     d8a:	2f 2d       	mov	r18, r15
     d8c:	3e 2d       	mov	r19, r14
     d8e:	4d 2d       	mov	r20, r13
     d90:	5c 2d       	mov	r21, r12
     d92:	61 d1       	rcall	.+706    	; 0x1056 <__udivmodsi4>
     d94:	1f 2d       	mov	r17, r15
     d96:	0e 2d       	mov	r16, r14
     d98:	bd 2c       	mov	r11, r13
     d9a:	ac 2c       	mov	r10, r12
     d9c:	61 15       	cp	r22, r1
     d9e:	71 05       	cpc	r23, r1
		if( c == 0 ) { return b; }
     da0:	81 05       	cpc	r24, r1
     da2:	91 05       	cpc	r25, r1
     da4:	51 f7       	brne	.-44     	; 0xd7a <main+0x82>
     da6:	1b e4       	ldi	r17, 0x4B	; 75
     da8:	00 e0       	ldi	r16, 0x00	; 0
     daa:	b1 2c       	mov	r11, r1
     dac:	a1 2c       	mov	r10, r1
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <main+0xc0>
     db0:	16 2f       	mov	r17, r22
     db2:	07 2f       	mov	r16, r23
		a = b;
		b = c;
     db4:	b8 2e       	mov	r11, r24
     db6:	a9 2e       	mov	r10, r25
     db8:	6f 2d       	mov	r22, r15
     dba:	7e 2d       	mov	r23, r14
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
     dbc:	8d 2d       	mov	r24, r13
     dbe:	9c 2d       	mov	r25, r12
     dc0:	21 2f       	mov	r18, r17
     dc2:	30 2f       	mov	r19, r16
     dc4:	4b 2d       	mov	r20, r11
     dc6:	5a 2d       	mov	r21, r10
     dc8:	46 d1       	rcall	.+652    	; 0x1056 <__udivmodsi4>
     dca:	f1 2e       	mov	r15, r17
     dcc:	e0 2e       	mov	r14, r16
     dce:	db 2c       	mov	r13, r11
     dd0:	ca 2c       	mov	r12, r10
     dd2:	61 15       	cp	r22, r1
     dd4:	71 05       	cpc	r23, r1
		if( c == 0 ) { return b; }
     dd6:	81 05       	cpc	r24, r1
     dd8:	91 05       	cpc	r25, r1
     dda:	51 f7       	brne	.-44     	; 0xdb0 <main+0xb8>
     ddc:	0f 2e       	mov	r0, r31
     dde:	f8 e2       	ldi	r31, 0x28	; 40
     de0:	ff 2e       	mov	r15, r31
     de2:	f0 2d       	mov	r31, r0
     de4:	e1 2c       	mov	r14, r1
     de6:	d1 2c       	mov	r13, r1
     de8:	c1 2c       	mov	r12, r1
     dea:	04 c0       	rjmp	.+8      	; 0xdf4 <main+0xfc>
     dec:	f6 2e       	mov	r15, r22
     dee:	e7 2e       	mov	r14, r23
		a = b;
		b = c;
     df0:	d8 2e       	mov	r13, r24
     df2:	c9 2e       	mov	r12, r25
     df4:	61 2f       	mov	r22, r17
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
     df6:	70 2f       	mov	r23, r16
     df8:	8b 2d       	mov	r24, r11
     dfa:	9a 2d       	mov	r25, r10
     dfc:	2f 2d       	mov	r18, r15
     dfe:	3e 2d       	mov	r19, r14
     e00:	4d 2d       	mov	r20, r13
     e02:	5c 2d       	mov	r21, r12
     e04:	28 d1       	rcall	.+592    	; 0x1056 <__udivmodsi4>
     e06:	1f 2d       	mov	r17, r15
     e08:	0e 2d       	mov	r16, r14
     e0a:	bd 2c       	mov	r11, r13
     e0c:	ac 2c       	mov	r10, r12
     e0e:	61 15       	cp	r22, r1
     e10:	71 05       	cpc	r23, r1
		if( c == 0 ) { return b; }
     e12:	81 05       	cpc	r24, r1
     e14:	91 05       	cpc	r25, r1
     e16:	51 f7       	brne	.-44     	; 0xdec <main+0xf4>
     e18:	0f 2e       	mov	r0, r31
     e1a:	f8 e2       	ldi	r31, 0x28	; 40
     e1c:	af 2e       	mov	r10, r31
     e1e:	f0 2d       	mov	r31, r0
     e20:	b1 2c       	mov	r11, r1
     e22:	00 e0       	ldi	r16, 0x00	; 0
     e24:	10 e0       	ldi	r17, 0x00	; 0
     e26:	04 c0       	rjmp	.+8      	; 0xe30 <main+0x138>
     e28:	a6 2e       	mov	r10, r22
     e2a:	b7 2e       	mov	r11, r23
		a = b;
		b = c;
     e2c:	08 2f       	mov	r16, r24
     e2e:	19 2f       	mov	r17, r25
     e30:	6f 2d       	mov	r22, r15
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
     e32:	7e 2d       	mov	r23, r14
     e34:	8d 2d       	mov	r24, r13
     e36:	9c 2d       	mov	r25, r12
     e38:	2a 2d       	mov	r18, r10
     e3a:	3b 2d       	mov	r19, r11
     e3c:	40 2f       	mov	r20, r16
     e3e:	51 2f       	mov	r21, r17
     e40:	0a d1       	rcall	.+532    	; 0x1056 <__udivmodsi4>
     e42:	fa 2c       	mov	r15, r10
     e44:	eb 2c       	mov	r14, r11
     e46:	d0 2e       	mov	r13, r16
     e48:	c1 2e       	mov	r12, r17
     e4a:	61 15       	cp	r22, r1
     e4c:	71 05       	cpc	r23, r1
		if( c == 0 ) { return b; }
     e4e:	81 05       	cpc	r24, r1
     e50:	91 05       	cpc	r25, r1
     e52:	51 f7       	brne	.-44     	; 0xe28 <main+0x130>
     e54:	6b e4       	ldi	r22, 0x4B	; 75
	tmpGCD = findGCD(tmpGCD, Tick_Coll_calc);
	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;
	
	//Recalculate GCD periods for scheduler
	unsigned long int Tick_Loc_period = Tick_Loc_calc/GCD;
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	2a 2d       	mov	r18, r10
     e5e:	3b 2d       	mov	r19, r11
     e60:	40 2f       	mov	r20, r16
     e62:	51 2f       	mov	r21, r17
     e64:	f8 d0       	rcall	.+496    	; 0x1056 <__udivmodsi4>
     e66:	69 01       	movw	r12, r18
     e68:	7a 01       	movw	r14, r20
     e6a:	68 e2       	ldi	r22, 0x28	; 40
	unsigned long int Tick_Build_period = Tick_Build_calc/GCD;
	unsigned long int Tick_Proj_period = Tick_Proj_calc/GCD;
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	2a 2d       	mov	r18, r10
     e74:	3b 2d       	mov	r19, r11
     e76:	40 2f       	mov	r20, r16
     e78:	51 2f       	mov	r21, r17
     e7a:	ed d0       	rcall	.+474    	; 0x1056 <__udivmodsi4>
     e7c:	80 e1       	ldi	r24, 0x10	; 16
     e7e:	ec e1       	ldi	r30, 0x1C	; 28
	static task task5;
	static task task6;
	static task task7;
	static task task8;
	
	task *tasks[] = {&task1, &task2, &task3, &task4, &task5, &task6, &task7, &task8};
     e80:	f1 e0       	ldi	r31, 0x01	; 1
     e82:	de 01       	movw	r26, r28
     e84:	11 96       	adiw	r26, 0x01	; 1
     e86:	01 90       	ld	r0, Z+
     e88:	0d 92       	st	X+, r0
     e8a:	8a 95       	dec	r24
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <main+0x18e>
     e8e:	ef ec       	ldi	r30, 0xCF	; 207
     e90:	f3 e0       	ldi	r31, 0x03	; 3
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// Task 1
	task1.state = -1;//Task initial state.
     e92:	6f ef       	ldi	r22, 0xFF	; 255
     e94:	60 83       	st	Z, r22
     e96:	c1 82       	std	Z+1, r12	; 0x01
     e98:	d2 82       	std	Z+2, r13	; 0x02
	task1.period = Tick_Loc_period;//Task Period.
     e9a:	e3 82       	std	Z+3, r14	; 0x03
     e9c:	f4 82       	std	Z+4, r15	; 0x04
     e9e:	c5 82       	std	Z+5, r12	; 0x05
     ea0:	d6 82       	std	Z+6, r13	; 0x06
	task1.elapsedTime = Tick_Loc_period;//Task current elapsed time.
     ea2:	e7 82       	std	Z+7, r14	; 0x07
     ea4:	f0 86       	std	Z+8, r15	; 0x08
     ea6:	88 e8       	ldi	r24, 0x88	; 136
     ea8:	94 e0       	ldi	r25, 0x04	; 4
	task1.TickFct = &LocTick;//Function pointer for the tick.
     eaa:	92 87       	std	Z+10, r25	; 0x0a
     eac:	81 87       	std	Z+9, r24	; 0x09
     eae:	e4 ec       	ldi	r30, 0xC4	; 196
     eb0:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 2
	task2.state = -1;//Task initial state.
     eb2:	60 83       	st	Z, r22
     eb4:	c1 82       	std	Z+1, r12	; 0x01
     eb6:	d2 82       	std	Z+2, r13	; 0x02
	task2.period = Tick_Build_period;//Task Period.
     eb8:	e3 82       	std	Z+3, r14	; 0x03
     eba:	f4 82       	std	Z+4, r15	; 0x04
     ebc:	c5 82       	std	Z+5, r12	; 0x05
     ebe:	d6 82       	std	Z+6, r13	; 0x06
	task2.elapsedTime = Tick_Build_period;//Task current elapsed time.
     ec0:	e7 82       	std	Z+7, r14	; 0x07
     ec2:	f0 86       	std	Z+8, r15	; 0x08
     ec4:	83 e9       	ldi	r24, 0x93	; 147
     ec6:	93 e0       	ldi	r25, 0x03	; 3
	task2.TickFct = &BuildTick;//Function pointer for the tick.
     ec8:	92 87       	std	Z+10, r25	; 0x0a
     eca:	81 87       	std	Z+9, r24	; 0x09
     ecc:	e9 eb       	ldi	r30, 0xB9	; 185
     ece:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 3
	task3.state = -1;//Task initial state.
     ed0:	60 83       	st	Z, r22
     ed2:	21 83       	std	Z+1, r18	; 0x01
     ed4:	32 83       	std	Z+2, r19	; 0x02
	task3.period = Tick_Proj_period;//Task Period.
     ed6:	43 83       	std	Z+3, r20	; 0x03
     ed8:	54 83       	std	Z+4, r21	; 0x04
     eda:	25 83       	std	Z+5, r18	; 0x05
     edc:	36 83       	std	Z+6, r19	; 0x06
	task3.elapsedTime = Tick_Proj_period;//Task current elapsed time.
     ede:	47 83       	std	Z+7, r20	; 0x07
     ee0:	50 87       	std	Z+8, r21	; 0x08
     ee2:	81 e3       	ldi	r24, 0x31	; 49
     ee4:	95 e0       	ldi	r25, 0x05	; 5
	task3.TickFct = &ProjTick;//Function pointer for the tick.
     ee6:	92 87       	std	Z+10, r25	; 0x0a
     ee8:	81 87       	std	Z+9, r24	; 0x09
     eea:	ee ea       	ldi	r30, 0xAE	; 174
     eec:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 4
	task4.state = -1;//Task initial state.
     eee:	60 83       	st	Z, r22
     ef0:	c1 82       	std	Z+1, r12	; 0x01
     ef2:	d2 82       	std	Z+2, r13	; 0x02
	task4.period = Tick_Loc2_period;//Task Period.
     ef4:	e3 82       	std	Z+3, r14	; 0x03
     ef6:	f4 82       	std	Z+4, r15	; 0x04
     ef8:	c5 82       	std	Z+5, r12	; 0x05
     efa:	d6 82       	std	Z+6, r13	; 0x06
	task4.elapsedTime = Tick_Loc2_period;//Task current elapsed time.
     efc:	e7 82       	std	Z+7, r14	; 0x07
     efe:	f0 86       	std	Z+8, r15	; 0x08
     f00:	87 ef       	ldi	r24, 0xF7	; 247
     f02:	95 e0       	ldi	r25, 0x05	; 5
	task4.TickFct = &LocTick2;//Function pointer for the tick.
     f04:	92 87       	std	Z+10, r25	; 0x0a
     f06:	81 87       	std	Z+9, r24	; 0x09
     f08:	e3 ea       	ldi	r30, 0xA3	; 163
     f0a:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 5
	task5.state = -1;//Task initial state.
     f0c:	60 83       	st	Z, r22
     f0e:	c1 82       	std	Z+1, r12	; 0x01
     f10:	d2 82       	std	Z+2, r13	; 0x02
	task5.period = Tick_Build2_period;//Task Period.
     f12:	e3 82       	std	Z+3, r14	; 0x03
     f14:	f4 82       	std	Z+4, r15	; 0x04
     f16:	c5 82       	std	Z+5, r12	; 0x05
     f18:	d6 82       	std	Z+6, r13	; 0x06
	task5.elapsedTime = Tick_Build2_period;//Task current elapsed time.
     f1a:	e7 82       	std	Z+7, r14	; 0x07
     f1c:	f0 86       	std	Z+8, r15	; 0x08
     f1e:	8e e3       	ldi	r24, 0x3E	; 62
     f20:	92 e0       	ldi	r25, 0x02	; 2
	task5.TickFct = &BuildTick2;//Function pointer for the tick.
     f22:	92 87       	std	Z+10, r25	; 0x0a
     f24:	81 87       	std	Z+9, r24	; 0x09
     f26:	e8 e9       	ldi	r30, 0x98	; 152
     f28:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 6
	task6.state = -1;//Task initial state.
     f2a:	60 83       	st	Z, r22
     f2c:	21 83       	std	Z+1, r18	; 0x01
     f2e:	32 83       	std	Z+2, r19	; 0x02
	task6.period = Tick_Proj2_period;//Task Period.
     f30:	43 83       	std	Z+3, r20	; 0x03
     f32:	54 83       	std	Z+4, r21	; 0x04
     f34:	25 83       	std	Z+5, r18	; 0x05
     f36:	36 83       	std	Z+6, r19	; 0x06
	task6.elapsedTime = Tick_Proj2_period;//Task current elapsed time.
     f38:	47 83       	std	Z+7, r20	; 0x07
     f3a:	50 87       	std	Z+8, r21	; 0x08
     f3c:	82 ee       	ldi	r24, 0xE2	; 226
     f3e:	92 e0       	ldi	r25, 0x02	; 2
	task6.TickFct = &ProjTick2;//Function pointer for the tick.
     f40:	92 87       	std	Z+10, r25	; 0x0a
     f42:	81 87       	std	Z+9, r24	; 0x09
     f44:	ed e8       	ldi	r30, 0x8D	; 141
     f46:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 7
	task7.state = -1;//Task initial state.
     f48:	60 83       	st	Z, r22
     f4a:	21 83       	std	Z+1, r18	; 0x01
     f4c:	32 83       	std	Z+2, r19	; 0x02
	task7.period = Tick_Coll_period;//Task Period.
     f4e:	43 83       	std	Z+3, r20	; 0x03
     f50:	54 83       	std	Z+4, r21	; 0x04
     f52:	25 83       	std	Z+5, r18	; 0x05
     f54:	36 83       	std	Z+6, r19	; 0x06
	task7.elapsedTime = Tick_Coll_period;//Task current elapsed time.
     f56:	47 83       	std	Z+7, r20	; 0x07
     f58:	50 87       	std	Z+8, r21	; 0x08
     f5a:	83 e8       	ldi	r24, 0x83	; 131
     f5c:	91 e0       	ldi	r25, 0x01	; 1
	task7.TickFct = &CollTick;//Function pointer for the tick.
     f5e:	92 87       	std	Z+10, r25	; 0x0a
     f60:	81 87       	std	Z+9, r24	; 0x09
     f62:	e2 e8       	ldi	r30, 0x82	; 130
     f64:	f3 e0       	ldi	r31, 0x03	; 3
	
	// Task 8
	task8.state = -1;//Task initial state.
     f66:	60 83       	st	Z, r22
     f68:	21 83       	std	Z+1, r18	; 0x01
     f6a:	32 83       	std	Z+2, r19	; 0x02
	task8.period = Tick_Coll_period;//Task Period.
     f6c:	43 83       	std	Z+3, r20	; 0x03
     f6e:	54 83       	std	Z+4, r21	; 0x04
     f70:	25 83       	std	Z+5, r18	; 0x05
	task8.elapsedTime = Tick_Coll_period;//Task current elapsed time.
     f72:	36 83       	std	Z+6, r19	; 0x06
     f74:	47 83       	std	Z+7, r20	; 0x07
     f76:	50 87       	std	Z+8, r21	; 0x08
	task8.TickFct = &CollTick2;//Function pointer for the tick.
     f78:	83 ed       	ldi	r24, 0xD3	; 211
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	92 87       	std	Z+10, r25	; 0x0a
     f7e:	81 87       	std	Z+9, r24	; 0x09
	
	
	TimerSet(GCD);
     f80:	6a 2d       	mov	r22, r10
     f82:	7b 2d       	mov	r23, r11
     f84:	80 2f       	mov	r24, r16
     f86:	91 2f       	mov	r25, r17
     f88:	c1 d8       	rcall	.-3710   	; 0x10c <TimerSet>
     f8a:	d1 d8       	rcall	.-3678   	; 0x12e <TimerOn>
	TimerOn();
     f8c:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <i>
    while (1) 
    {
		

		
		for ( i = 0; i < numTasks; i++ ) {
     f90:	e0 e0       	ldi	r30, 0x00	; 0
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	ee 0f       	add	r30, r30
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
     f96:	ff 1f       	adc	r31, r31
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	8c 0f       	add	r24, r28
     f9e:	9d 1f       	adc	r25, r29
     fa0:	e8 0f       	add	r30, r24
     fa2:	f9 1f       	adc	r31, r25
     fa4:	00 81       	ld	r16, Z
     fa6:	11 81       	ldd	r17, Z+1	; 0x01
     fa8:	d8 01       	movw	r26, r16
     faa:	15 96       	adiw	r26, 0x05	; 5
     fac:	4d 91       	ld	r20, X+
     fae:	5d 91       	ld	r21, X+
     fb0:	6d 91       	ld	r22, X+
     fb2:	7c 91       	ld	r23, X
     fb4:	18 97       	sbiw	r26, 0x08	; 8
     fb6:	11 96       	adiw	r26, 0x01	; 1
     fb8:	8d 91       	ld	r24, X+
     fba:	9d 91       	ld	r25, X+
     fbc:	0d 90       	ld	r0, X+
     fbe:	bc 91       	ld	r27, X
     fc0:	a0 2d       	mov	r26, r0
     fc2:	48 17       	cp	r20, r24
     fc4:	59 07       	cpc	r21, r25
     fc6:	6a 07       	cpc	r22, r26
     fc8:	7b 07       	cpc	r23, r27
     fca:	e9 f4       	brne	.+58     	; 0x1006 <main+0x30e>
     fcc:	f8 01       	movw	r30, r16
     fce:	80 81       	ld	r24, Z
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
     fd0:	01 84       	ldd	r0, Z+9	; 0x09
     fd2:	f2 85       	ldd	r31, Z+10	; 0x0a
     fd4:	e0 2d       	mov	r30, r0
     fd6:	08 2e       	mov	r0, r24
     fd8:	00 0c       	add	r0, r0
     fda:	99 0b       	sbc	r25, r25
     fdc:	09 95       	icall
     fde:	d8 01       	movw	r26, r16
     fe0:	8c 93       	st	X, r24
     fe2:	e0 91 da 03 	lds	r30, 0x03DA	; 0x8003da <i>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	8c 0f       	add	r24, r28
     ff2:	9d 1f       	adc	r25, r29
     ff4:	e8 0f       	add	r30, r24
     ff6:	f9 1f       	adc	r31, r25
     ff8:	01 90       	ld	r0, Z+
     ffa:	f0 81       	ld	r31, Z
     ffc:	e0 2d       	mov	r30, r0
     ffe:	15 82       	std	Z+5, r1	; 0x05
    1000:	16 82       	std	Z+6, r1	; 0x06
    1002:	17 82       	std	Z+7, r1	; 0x07
    1004:	10 86       	std	Z+8, r1	; 0x08
    1006:	40 91 da 03 	lds	r20, 0x03DA	; 0x8003da <i>
			}
			tasks[i]->elapsedTime += 1;
    100a:	a4 2f       	mov	r26, r20
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	aa 0f       	add	r26, r26
    1010:	bb 1f       	adc	r27, r27
    1012:	e1 e0       	ldi	r30, 0x01	; 1
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	ec 0f       	add	r30, r28
    1018:	fd 1f       	adc	r31, r29
    101a:	ae 0f       	add	r26, r30
    101c:	bf 1f       	adc	r27, r31
    101e:	2d 91       	ld	r18, X+
    1020:	3c 91       	ld	r19, X
    1022:	f9 01       	movw	r30, r18
    1024:	85 81       	ldd	r24, Z+5	; 0x05
    1026:	96 81       	ldd	r25, Z+6	; 0x06
    1028:	a7 81       	ldd	r26, Z+7	; 0x07
    102a:	b0 85       	ldd	r27, Z+8	; 0x08
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	a1 1d       	adc	r26, r1
    1030:	b1 1d       	adc	r27, r1
    1032:	85 83       	std	Z+5, r24	; 0x05
    1034:	96 83       	std	Z+6, r25	; 0x06
    1036:	a7 83       	std	Z+7, r26	; 0x07
    1038:	b0 87       	std	Z+8, r27	; 0x08
    103a:	e1 e0       	ldi	r30, 0x01	; 1
    103c:	e4 0f       	add	r30, r20
    while (1) 
    {
		

		
		for ( i = 0; i < numTasks; i++ ) {
    103e:	e0 93 da 03 	sts	0x03DA, r30	; 0x8003da <i>
    1042:	e8 30       	cpi	r30, 0x08	; 8
    1044:	08 f4       	brcc	.+2      	; 0x1048 <main+0x350>
    1046:	a5 cf       	rjmp	.-182    	; 0xf92 <main+0x29a>
    1048:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <TimerFlag>
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
				
		while(!TimerFlag);
    104c:	88 23       	and	r24, r24
    104e:	e1 f3       	breq	.-8      	; 0x1048 <main+0x350>
    1050:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <TimerFlag>
		TimerFlag = 0;
    1054:	9b cf       	rjmp	.-202    	; 0xf8c <main+0x294>

00001056 <__udivmodsi4>:
    1056:	a1 e2       	ldi	r26, 0x21	; 33
		
		
		
    }
    1058:	1a 2e       	mov	r1, r26
    105a:	aa 1b       	sub	r26, r26
    105c:	bb 1b       	sub	r27, r27
    105e:	fd 01       	movw	r30, r26
    1060:	0d c0       	rjmp	.+26     	; 0x107c <__udivmodsi4_ep>

00001062 <__udivmodsi4_loop>:
    1062:	aa 1f       	adc	r26, r26
    1064:	bb 1f       	adc	r27, r27
    1066:	ee 1f       	adc	r30, r30
    1068:	ff 1f       	adc	r31, r31
    106a:	a2 17       	cp	r26, r18
    106c:	b3 07       	cpc	r27, r19
    106e:	e4 07       	cpc	r30, r20
    1070:	f5 07       	cpc	r31, r21
    1072:	20 f0       	brcs	.+8      	; 0x107c <__udivmodsi4_ep>
    1074:	a2 1b       	sub	r26, r18
    1076:	b3 0b       	sbc	r27, r19
    1078:	e4 0b       	sbc	r30, r20
    107a:	f5 0b       	sbc	r31, r21

0000107c <__udivmodsi4_ep>:
    107c:	66 1f       	adc	r22, r22
    107e:	77 1f       	adc	r23, r23
    1080:	88 1f       	adc	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	1a 94       	dec	r1
    1086:	69 f7       	brne	.-38     	; 0x1062 <__udivmodsi4_loop>
    1088:	60 95       	com	r22
    108a:	70 95       	com	r23
    108c:	80 95       	com	r24
    108e:	90 95       	com	r25
    1090:	9b 01       	movw	r18, r22
    1092:	ac 01       	movw	r20, r24
    1094:	bd 01       	movw	r22, r26
    1096:	cf 01       	movw	r24, r30
    1098:	08 95       	ret

0000109a <_exit>:
    109a:	f8 94       	cli

0000109c <__stop_program>:
    109c:	ff cf       	rjmp	.-2      	; 0x109c <__stop_program>
